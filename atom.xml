<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哲锄</title>
  
  <subtitle>用智慧耕耘人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhechu.top/"/>
  <updated>2021-06-22T10:30:40.376Z</updated>
  <id>http://www.zhechu.top/</id>
  
  <author>
    <name>zhechu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ClickHouse实现排行榜</title>
    <link href="http://www.zhechu.top/2021/06/22/ClickHouse%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <id>http://www.zhechu.top/2021/06/22/ClickHouse实现排行榜/</id>
    <published>2021-06-22T10:23:32.000Z</published>
    <updated>2021-06-22T10:30:40.376Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 初始化数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE saas_test_tenant.user_score  (</span><br><span class="line">  id int(11) NOT NULL,</span><br><span class="line">  score int(11),</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (0, 7);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (1, 1);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (2, 2);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (5, 5);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (6, 3);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (7, 4);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (8, 9);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (9, 9);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (10, 8);</span><br><span class="line">INSERT INTO grid_university_test_tenant.user_score(id, score) VALUES (11, 4);</span><br></pre></td></tr></table></figure></p><p>同步数据到 ClickHouse<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /usr/bin/clickhouse-client --host 192.168.1.225 -u test --password admin123 --query="CREATE TABLE if not exists saas_test_tenant.user_score ENGINE = ReplacingMergeTree  ORDER BY id  AS SELECT * FROM mysql('192.168.1.154:3306', 'saas_test_tenant', 'user_score', 'root', '123456')"</span><br></pre></td></tr></table></figure></p><p>实现按 score 排行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    id,</span><br><span class="line">    score,</span><br><span class="line">    row_number,</span><br><span class="line">    dense_rank,</span><br><span class="line">    uniq_rank</span><br><span class="line">FROM (</span><br><span class="line">      SELECT</span><br><span class="line">          groupArray(id)            AS id,</span><br><span class="line">          groupArray(score)            AS arr_val,</span><br><span class="line">          arrayEnumerate(arr_val)      AS row_number,</span><br><span class="line">          arrayEnumerateDense(arr_val) AS dense_rank,</span><br><span class="line">          arrayEnumerateUniq(arr_val)  AS uniq_rank</span><br><span class="line">      FROM (</span><br><span class="line">            SELECT * FROM saas_test_tenant.user_score ORDER BY score ASC</span><br><span class="line">               )</span><br><span class="line">         ) ARRAY JOIN</span><br><span class="line">     id,</span><br><span class="line">     arr_val AS score,</span><br><span class="line">    row_number,</span><br><span class="line">    dense_rank,</span><br><span class="line">    uniq_rank</span><br><span class="line">ORDER BY</span><br><span class="line">    row_number ASC,</span><br><span class="line">    dense_rank ASC</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL 初始化数据&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
      <category term="ClickHouse" scheme="http://www.zhechu.top/categories/ClickHouse/"/>
    
    
      <category term="SQL优化" scheme="http://www.zhechu.top/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Mysql到ClickHouse同步方案</title>
    <link href="http://www.zhechu.top/2021/06/22/Mysql%E5%88%B0ClickHouse%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
    <id>http://www.zhechu.top/2021/06/22/Mysql到ClickHouse同步方案/</id>
    <published>2021-06-22T10:06:36.000Z</published>
    <updated>2021-06-22T10:27:59.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基于-synch-redis-同步方案"><a href="#1-基于-synch-redis-同步方案" class="headerlink" title="1 基于 synch redis 同步方案"></a>1 基于 synch redis 同步方案</h2><p>官方文档</p><p><a href="https://github.com/long2ice/synch/blob/dev/README-zh.md" target="_blank" rel="noopener">https://github.com/long2ice/synch/blob/dev/README-zh.md</a></p><p>解压安装包 synch-0.7.1.zip<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> unzip synch-0.7.1.zip</span><br></pre></td></tr></table></figure></p><p>数据库必须进行 bin log 相关配置</p><p>略</p><p>部署 Redis 6.2.4<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --network=host --name redis -d redis:6.2.4</span><br></pre></td></tr></table></figure></p><p>根据需求配置同步表数据<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd synch-0.7.1</span><br><span class="line"><span class="meta">$</span> cp synch.yaml synch.yaml.default</span><br><span class="line"><span class="meta">$</span> vi synch.yaml</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">core:</span><br><span class="line">  debug: true # when set True, will display sql information.</span><br><span class="line">  insert_num: 1 # how many num to submit,recommend set 20000 when production</span><br><span class="line">  insert_interval: 1 # how many seconds to submit,recommend set 60 when production</span><br><span class="line"><span class="meta">  #</span> enable this will auto create database `synch` in ClickHouse and insert monitor data</span><br><span class="line">  monitoring: true</span><br><span class="line"></span><br><span class="line">sentry:</span><br><span class="line">  environment: development</span><br><span class="line">  dsn:</span><br><span class="line"></span><br><span class="line">redis:</span><br><span class="line">  host: 192.168.180.78</span><br><span class="line">  port: 6379</span><br><span class="line">  db: 0</span><br><span class="line">  password:</span><br><span class="line">  prefix: synch</span><br><span class="line">  sentinel: false # enable redis sentinel</span><br><span class="line">  sentinel_hosts: # redis sentinel hosts</span><br><span class="line">    - 127.0.0.1:5000</span><br><span class="line">    - 127.0.0.1:5001</span><br><span class="line">    - 127.0.0.1:5002</span><br><span class="line">  sentinel_master: master</span><br><span class="line">  queue_max_len: 200000 # stream max len, will delete redundant ones with FIFO</span><br><span class="line"></span><br><span class="line">source_dbs:</span><br><span class="line">  - db_type: mysql</span><br><span class="line">    alias: mysql_db # must be unique</span><br><span class="line">    broker_type: redis # current support redis and kafka</span><br><span class="line">    server_id: 1</span><br><span class="line">    host: 192.168.1.154</span><br><span class="line">    port: 3306</span><br><span class="line">    user: root</span><br><span class="line">    password: "123456"</span><br><span class="line">    # optional, auto get from `show master status` when empty</span><br><span class="line">    init_binlog_file:</span><br><span class="line">    # optional, auto get from `show master status` when empty</span><br><span class="line">    init_binlog_pos:</span><br><span class="line">    skip_dmls: # dmls to skip</span><br><span class="line">    skip_delete_tables: # tables skip delete, format with schema.table</span><br><span class="line">    skip_update_tables: # tables skip update, format with schema.table</span><br><span class="line">    databases:</span><br><span class="line">      - database: saas_test_tenant</span><br><span class="line">        auto_create: true</span><br><span class="line">        tables:</span><br><span class="line">          - table: information_info</span><br><span class="line">            skip_decimal: false</span><br><span class="line">            auto_full_etl: true</span><br><span class="line">            clickhouse_engine: ReplacingMergeTree</span><br><span class="line">            sign_column: sign</span><br><span class="line">          - table: information_type</span><br><span class="line">            skip_decimal: false</span><br><span class="line">            auto_full_etl: true</span><br><span class="line">            clickhouse_engine: ReplacingMergeTree</span><br><span class="line">            sign_column: sign</span><br><span class="line">          - table: information_history</span><br><span class="line">            skip_decimal: false</span><br><span class="line">            auto_full_etl: true</span><br><span class="line">            clickhouse_engine: ReplacingMergeTree</span><br><span class="line">            sign_column: sign</span><br><span class="line">      - database: integral_test_tenant</span><br><span class="line">        auto_create: true</span><br><span class="line">        tables:</span><br><span class="line">          - table: integral_total</span><br><span class="line">            skip_decimal: false</span><br><span class="line">            auto_full_etl: true</span><br><span class="line">            clickhouse_engine: ReplacingMergeTree</span><br><span class="line">            sign_column: sign</span><br><span class="line"></span><br><span class="line">clickhouse:</span><br><span class="line">  hosts:</span><br><span class="line">    - 192.168.1.225:9000</span><br><span class="line">  user: test</span><br><span class="line">  password: 'admin123'</span><br><span class="line">  cluster_name:</span><br><span class="line">  distributed_suffix: _all</span><br></pre></td></tr></table></figure><blockquote><p>TIPS：同步 saas_test_tenant 和 integral_test_tenant 的相关表到 192.168.1.225 的 ClickHouse 中</p></blockquote><p>配置订阅命令<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cp docker-compose.yml docker-compose.yml.default</span><br><span class="line"><span class="meta">$</span> vi docker-compose.yml</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">  producer:</span><br><span class="line">    image: long2ice/synch</span><br><span class="line">    command: synch --alias mysql_db produce</span><br><span class="line">    volumes:</span><br><span class="line">      - ./synch.yaml:/synch/synch.yaml</span><br><span class="line">  consumer.saas_test_tenant:</span><br><span class="line">    image: long2ice/synch</span><br><span class="line">    command: synch --alias mysql_db consume --schema saas_test_tenant</span><br><span class="line">    volumes:</span><br><span class="line">      - ./synch.yaml:/synch/synch.yaml</span><br><span class="line">  consumer.integral_test_tenant:</span><br><span class="line">    image: long2ice/synch</span><br><span class="line">    command: synch --alias mysql_db consume --schema integral_test_tenant</span><br><span class="line">    volumes:</span><br><span class="line">      - ./synch.yaml:/synch/synch.yaml</span><br></pre></td></tr></table></figure><p>启动同步服务<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>查询 ClickHouse 是否已有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    &apos;资讯总数&apos; AS type_name,</span><br><span class="line">count( * ) AS information_count,</span><br><span class="line">&apos;100%&apos; AS information_count_rate</span><br><span class="line">FROM</span><br><span class="line">    saas_test_tenant.information_info</span><br><span class="line">WHERE</span><br><span class="line">    tenant_id = &apos;97c281870bf74eedba196d998f49ff7f&apos;</span><br></pre></td></tr></table></figure></p><p>查看监控日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from synch.log</span><br></pre></td></tr></table></figure></p><h2 id="2-基于命令行客户端同步方案"><a href="#2-基于命令行客户端同步方案" class="headerlink" title="2 基于命令行客户端同步方案"></a>2 基于命令行客户端同步方案</h2><blockquote><p>TIPS：基于此方案同步日表，并使用ClickHouse合并表机制作聚合查询</p></blockquote><p>官方合并表使用文档</p><p><a href="https://clickhouse.tech/docs/zh/engines/table-engines/special/merge/" target="_blank" rel="noopener">https://clickhouse.tech/docs/zh/engines/table-engines/special/merge/</a></p><p>同步日表脚本<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir -p /usr/local/job</span><br><span class="line"><span class="meta">$</span> vi /usr/local/job/job.sh</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">export YESTERDAY=`date "+%Y%m%d" -d "-1day"`</span><br><span class="line">echo $(date "+%F %T")' start job' &gt;&gt; /usr/local/job/job.log</span><br><span class="line">/usr/bin/clickhouse-client --host 192.168.1.225 -u test --password admin123 --multiquery -q "create database if not exists saas_test_tenant;CREATE TABLE if not exists saas_test_tenant.active_user_log_$YESTERDAY ENGINE = ReplacingMergeTree  ORDER BY id  AS SELECT * FROM mysql('192.168.1.154:3306', 'saas_test_tenant', 'active_user_log_$YESTERDAY', 'root', '123456');" &gt;&gt; /usr/local/job/job.log</span><br><span class="line">echo $(date "+%F %T")' end job' &gt;&gt; /usr/local/job/job.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chmod +x /usr/local/job/job.sh</span><br></pre></td></tr></table></figure><p>设置定时每天 0 点 30 分执行<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> crontab -e</span><br><span class="line">30 0 * * * /bin/sh /usr/local/job/job.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>同步历史日表<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /usr/local/job/sync_history_data.sh</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">first=$1</span><br><span class="line">second=$2</span><br><span class="line">while [ "$first" != "$second" ]</span><br><span class="line">do</span><br><span class="line">echo $first</span><br><span class="line">/usr/bin/clickhouse-client --host 192.168.1.225 -u test --password admin123 --multiquery -q "create database if not exists saas_test_tenant;CREATE TABLE if not exists saas_test_tenant.active_user_log_$first ENGINE = ReplacingMergeTree  ORDER BY id  AS SELECT * FROM mysql('192.168.1.154:3306', 'saas_test_tenant', 'active_user_log_$first', 'root', '123456');"</span><br><span class="line">let first=`date -d "-1 days ago $&#123;first&#125;" +%Y%m%d`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chmod +x /usr/local/job/sync_history_data.sh</span><br><span class="line"><span class="meta">$</span> sh /usr/local/job/sync_history_data.sh 20201218 20210610</span><br></pre></td></tr></table></figure><blockquote><p>TIPS：不包含 20210610</p></blockquote><p>创建日表归并表<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /usr/bin/clickhouse-client --host 192.168.1.225 -u test --password admin123 --multiquery -q "create database if not exists saas_test_tenant;CREATE TABLE saas_test_tenant.active_user_log as saas_test_tenant.active_user_log_20210610 ENGINE=Merge('saas_test_tenant', 'active_user_log_*');"</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-基于-synch-redis-同步方案&quot;&gt;&lt;a href=&quot;#1-基于-synch-redis-同步方案&quot; class=&quot;headerlink&quot; title=&quot;1 基于 synch redis 同步方案&quot;&gt;&lt;/a&gt;1 基于 synch redis 同步方案&lt;/
      
    
    </summary>
    
      <category term="ClickHouse" scheme="http://www.zhechu.top/categories/ClickHouse/"/>
    
    
      <category term="CentOS7" scheme="http://www.zhechu.top/tags/CentOS7/"/>
    
      <category term="数据同步" scheme="http://www.zhechu.top/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装ClickHouse</title>
    <link href="http://www.zhechu.top/2021/06/22/CentOS7%E5%AE%89%E8%A3%85ClickHouse/"/>
    <id>http://www.zhechu.top/2021/06/22/CentOS7安装ClickHouse/</id>
    <published>2021-06-22T09:55:07.000Z</published>
    <updated>2021-06-22T10:32:17.415Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档</p><p><a href="https://clickhouse.tech/docs/zh/interfaces/third-party/gui/" target="_blank" rel="noopener">https://clickhouse.tech/docs/zh/interfaces/third-party/gui/</a></p><h2 id="1-安装ClickHouse-20-8-3-18"><a href="#1-安装ClickHouse-20-8-3-18" class="headerlink" title="1 安装ClickHouse 20.8.3.18"></a>1 安装ClickHouse 20.8.3.18</h2><p>官方安装文档</p><p><a href="https://clickhouse.tech/docs/zh/getting-started/install/" target="_blank" rel="noopener">https://clickhouse.tech/docs/zh/getting-started/install/</a></p><h2 id="2-初始化配置"><a href="#2-初始化配置" class="headerlink" title="2 初始化配置"></a>2 初始化配置</h2><p>配置远程可连接 8123 端口<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/clickhouse-server/config.xml</span><br><span class="line">&lt;listen_host&gt;::&lt;/listen_host&gt;</span><br></pre></td></tr></table></figure></p><p>配置用户 test/admin123<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cp /etc/clickhouse-server/users.xml /etc/clickhouse-server/users.xml.default</span><br><span class="line"><span class="meta">$</span> vi /etc/clickhouse-server/users.xml</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;yandex&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;max_memory_usage&gt;10000000000&lt;/max_memory_usage&gt;</span><br><span class="line">            &lt;use_uncompressed_cache&gt;0&lt;/use_uncompressed_cache&gt;</span><br><span class="line">            &lt;load_balancing&gt;random&lt;/load_balancing&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line"></span><br><span class="line">        &lt;readonly&gt;</span><br><span class="line">            &lt;readonly&gt;1&lt;/readonly&gt;</span><br><span class="line">        &lt;/readonly&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;users&gt;</span><br><span class="line">        &lt;test&gt;</span><br><span class="line">            &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line"></span><br><span class="line">            &lt;networks incl="networks" replace="replace"&gt;</span><br><span class="line">                &lt;ip&gt;::/0&lt;/ip&gt;</span><br><span class="line">            &lt;/networks&gt;</span><br><span class="line"></span><br><span class="line">            &lt;profile&gt;default&lt;/profile&gt;</span><br><span class="line">            &lt;quota&gt;default&lt;/quota&gt;</span><br><span class="line">        &lt;/test&gt;</span><br><span class="line">    &lt;/users&gt;</span><br><span class="line"></span><br><span class="line">    &lt;quotas&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;interval&gt;</span><br><span class="line">                &lt;duration&gt;3600&lt;/duration&gt;</span><br><span class="line">                &lt;queries&gt;0&lt;/queries&gt;</span><br><span class="line">                &lt;errors&gt;0&lt;/errors&gt;</span><br><span class="line">                &lt;result_rows&gt;0&lt;/result_rows&gt;</span><br><span class="line">                &lt;read_rows&gt;0&lt;/read_rows&gt;</span><br><span class="line">                &lt;execution_time&gt;0&lt;/execution_time&gt;</span><br><span class="line">            &lt;/interval&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">    &lt;/quotas&gt;</span><br><span class="line">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure><p>重启服务<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /etc/init.d/clickhouse-server restart</span><br></pre></td></tr></table></figure></p><p>检查 8123 端口是否可达<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -v -p 8123 root@192.168.1.225</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：出现 <code>Connection established.</code> 即可达</p></blockquote><h2 id="3-客户端"><a href="#3-客户端" class="headerlink" title="3 客户端"></a>3 客户端</h2><h3 id="3-1-命令行客户端"><a href="#3-1-命令行客户端" class="headerlink" title="3.1 命令行客户端"></a>3.1 命令行客户端</h3><p>连接本机服务<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /usr/bin/clickhouse-client -u test --password admin123</span><br></pre></td></tr></table></figure></p><p>全量同步（表不存在ClickHouse）<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /usr/bin/clickhouse-client --host 192.168.1.225 -u test --password admin123 --query="CREATE TABLE if not exists grid_university_test_tenant.gu_information_info ENGINE = ReplacingMergeTree  ORDER BY id  AS SELECT * FROM mysql('192.168.1.157:3306', 'grid_university_test_tenant', 'gu_information_info', 'university', 'gu@1234A')"</span><br></pre></td></tr></table></figure></p><h3 id="3-2-IntelliJ-IDEA"><a href="#3-2-IntelliJ-IDEA" class="headerlink" title="3.2 IntelliJ IDEA"></a>3.2 IntelliJ IDEA</h3><p>略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://clickhouse.tech/docs/zh/interfaces/third-party/gui/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://clickhouse.tech/
      
    
    </summary>
    
      <category term="ClickHouse" scheme="http://www.zhechu.top/categories/ClickHouse/"/>
    
    
      <category term="CentOS7" scheme="http://www.zhechu.top/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>Mysql日志</title>
    <link href="http://www.zhechu.top/2021/06/07/Mysql%E6%97%A5%E5%BF%97/"/>
    <id>http://www.zhechu.top/2021/06/07/Mysql日志/</id>
    <published>2021-06-07T02:05:23.000Z</published>
    <updated>2021-06-07T02:16:30.995Z</updated>
    
    <content type="html"><![CDATA[<p>环境说明</p><table><thead><tr><th>环境</th><th>说明</th></tr></thead><tbody><tr><td>Mysql-5.7.30</td><td>关系型数据库</td></tr><tr><td>general_log</td><td>MySQL 执行日志</td></tr><tr><td>CentOS7</td><td>操作系统</td></tr></tbody></table><p>查看日志是否开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;general_log&apos;;</span><br></pre></td></tr></table></figure></p><p>开启日志功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on;</span><br></pre></td></tr></table></figure></p><p>查看日志文件保存位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;general_log_file&apos;;</span><br></pre></td></tr></table></figure></p><p>设置日志文件保存位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file=&apos;tmp/general.log&apos;;</span><br></pre></td></tr></table></figure></p><p>查看日志输出类型 table 或 file<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;log_output&apos;;</span><br></pre></td></tr></table></figure></p><p>设置输出类型为 file<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global log_output=&apos;file&apos;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境说明&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mysql-5.7.30&lt;/td&gt;
&lt;td&gt;关系型数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ge
      
    
    </summary>
    
      <category term="Mysql" scheme="http://www.zhechu.top/categories/Mysql/"/>
    
    
      <category term="日志" scheme="http://www.zhechu.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置饿汉式异步线程池</title>
    <link href="http://www.zhechu.top/2021/03/05/SpringBoot%E9%85%8D%E7%BD%AE%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.zhechu.top/2021/03/05/SpringBoot配置饿汉式异步线程池/</id>
    <published>2021-03-05T03:08:18.000Z</published>
    <updated>2021-03-05T03:35:49.021Z</updated>
    
    <content type="html"><![CDATA[<p>问题：普通线程池在线程池队列满时，才开始从核心线程池个数增加到最大线程池个数。一个核心的矛盾则是，若线程池的队列已满，说明待处理的任务很多（客户端发送任务的速度可能也很快），即便在队列满后线程池个数增加到最大值，那也为时已晚，因为此时请求可能更多，将队列和线程占满后只能被丢弃（如此，那配置线程池最大阈值，只能在极限场景使用；而在任务队列未满时，maxPoolSize-corePoolSize 个隐藏可用的线程只能被搁置）</p><p>方案：引入饿汉式线程池，当线程池核心线程个数达到设置的阈值时，新来的任务不会被放入线程池队列，而是会开启新线程来处理任务（前提是当前线程个数没有超过线程池最大线程个数），当线程个数达到最大线程个数时，才会把任务放入线程池队列</p><p>环境说明</p><table><thead><tr><th>环境</th><th>说明</th></tr></thead><tbody><tr><td>spring-boot-1.5.x</td><td>企业应用程序框架</td></tr></tbody></table><h2 id="1-定义饿汉式线程池"><a href="#1-定义饿汉式线程池" class="headerlink" title="1 定义饿汉式线程池"></a>1 定义饿汉式线程池</h2><p>饿汉式线程池<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式线程池</span></span><br><span class="line"><span class="comment"> * 当线程数达到 max size 后再放入队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger submittedTaskCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EagerThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 TimeUnit unit, TaskQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubmittedTaskCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> submittedTaskCount.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123;</span><br><span class="line">    submittedTaskCount.decrementAndGet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当线程池核心线程个数达到设置的阈值时，新来的任务不会被放入线程池队列，</span></span><br><span class="line"><span class="comment">   * 而是会开启新线程来处理任务（前提是当前线程个数没有超过线程池最大线程个数），</span></span><br><span class="line"><span class="comment">   * 当线程个数达到最大线程个数时，才会把任务放入线程池队列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    submittedTaskCount.incrementAndGet();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">super</span>.execute(command);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class="line">      <span class="keyword">final</span> TaskQueue queue = (TaskQueue) <span class="keyword">super</span>.getQueue();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!queue.retryOffer(command, <span class="number">0</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">          submittedTaskCount.decrementAndGet();</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"Queue capacity is full."</span>, rx);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">        submittedTaskCount.decrementAndGet();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      submittedTaskCount.decrementAndGet();</span><br><span class="line">      <span class="keyword">throw</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>支持定义线程池名称的线程工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger POOL_SEQ = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> AtomicInteger mThreadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> String mPrefix;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mDaemon;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> ThreadGroup mGroup;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"pool-"</span> + POOL_SEQ.getAndIncrement(), <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedThreadFactory</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(prefix, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedThreadFactory</span><span class="params">(String prefix, <span class="keyword">boolean</span> daemon)</span> </span>&#123;</span><br><span class="line">    mPrefix = prefix + <span class="string">"-thread-"</span>;</span><br><span class="line">    mDaemon = daemon;</span><br><span class="line">    SecurityManager s = System.getSecurityManager();</span><br><span class="line">    mGroup = (s == <span class="keyword">null</span>) ? Thread.currentThread().getThreadGroup() : s.getThreadGroup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    String name = mPrefix + mThreadNum.getAndIncrement();</span><br><span class="line">    Thread ret = <span class="keyword">new</span> Thread(mGroup, runnable, name, <span class="number">0</span>);</span><br><span class="line">    ret.setDaemon(mDaemon);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ThreadGroup <span class="title">getThreadGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mGroup;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程池任务队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span>&lt;<span class="title">R</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2635853580887179627L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> EagerThreadPoolExecutor executor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TaskQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExecutor</span><span class="params">(EagerThreadPoolExecutor exec)</span> </span>&#123;</span><br><span class="line">    executor = exec;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"The task queue does not have executor!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> currentPoolThreadSize = executor.getPoolSize();</span><br><span class="line">    <span class="comment">// have free worker. put task into queue to let the worker deal with task.</span></span><br><span class="line">    <span class="keyword">if</span> (executor.getSubmittedTaskCount() &lt; currentPoolThreadSize) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.offer(runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return false to let executor create new worker.</span></span><br><span class="line">    <span class="keyword">if</span> (currentPoolThreadSize &lt; executor.getMaximumPoolSize()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// currentPoolThreadSize &gt;= max</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.offer(runnable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * retry offer task</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> o task</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> offer success or not</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> RejectedExecutionException if executor is terminated.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retryOffer</span><span class="params">(Runnable o, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (executor.isShutdown()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"Executor is shutdown!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.offer(o, timeout, unit);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-定义异步线程池属性"><a href="#2-定义异步线程池属性" class="headerlink" title="2 定义异步线程池属性"></a>2 定义异步线程池属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.FieldDefaults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.async.pool"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@FieldDefaults</span>(level = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncThreadPoolProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 核心线程数 线程池维护线程的最少数量，默认为1</span></span><br><span class="line"><span class="comment">   * 若配置值等于或小于0，则使用当前可用线程数减1（最小为1）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程池维护线程的最大数量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">int</span> maxPoolSize = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程池维护线程所允许的空闲时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">int</span> keepAliveSeconds = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程池所使用的缓冲队列容量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">int</span> queueCapacity = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置异步线程池"><a href="#3-配置异步线程池" class="headerlink" title="3 配置异步线程池"></a>3 配置异步线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> core.config.properties.AsyncThreadPoolProperties;</span><br><span class="line"><span class="keyword">import</span> core.thread.EagerThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> core.thread.NamedThreadFactory;</span><br><span class="line"><span class="keyword">import</span> core.thread.TaskQueue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步线程池配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(AsyncThreadPoolProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AsyncConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AsyncThreadPoolProperties asyncThreadPoolProperties;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Executor <span class="title">asyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程池中线程的名称前缀</span></span><br><span class="line">    String name = <span class="string">"asyncExecutor"</span>;</span><br><span class="line">    <span class="comment">// 核心线程的个数，如果没有设置，则使用默认的数值0</span></span><br><span class="line">    <span class="keyword">int</span> cores = Math.max(<span class="number">0</span>, asyncThreadPoolProperties.getCorePoolSize());</span><br><span class="line">    <span class="comment">// 线程池中最大线程的个数</span></span><br><span class="line">    <span class="keyword">int</span> threads = Math.max(<span class="number">1</span>, Math.max(Runtime.getRuntime().availableProcessors() &gt;&gt; <span class="number">1</span>, asyncThreadPoolProperties.getMaxPoolSize()));</span><br><span class="line">    <span class="comment">// 线程池阻塞队列大小，如果没有设置，则使用默认的数值1</span></span><br><span class="line">    <span class="keyword">int</span> queues = Math.max(<span class="number">1</span>, asyncThreadPoolProperties.getQueueCapacity());</span><br><span class="line">    <span class="comment">// 线程被回收的空闲时间值，如果没有设置，则使用默认的数值60</span></span><br><span class="line">    <span class="keyword">int</span> alive = Math.max(<span class="number">60</span>, asyncThreadPoolProperties.getKeepAliveSeconds());</span><br><span class="line"></span><br><span class="line">    TaskQueue&lt;Runnable&gt; taskQueue = <span class="keyword">new</span> TaskQueue&lt;&gt;(queues);</span><br><span class="line">    EagerThreadPoolExecutor executor = <span class="keyword">new</span> EagerThreadPoolExecutor(cores,</span><br><span class="line">        threads,</span><br><span class="line">        alive,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        taskQueue,</span><br><span class="line">        <span class="keyword">new</span> NamedThreadFactory(name),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">    taskQueue.setExecutor(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：普通线程池在线程池队列满时，才开始从核心线程池个数增加到最大线程池个数。一个核心的矛盾则是，若线程池的队列已满，说明待处理的任务很多（客户端发送任务的速度可能也很快），即便在队列满后线程池个数增加到最大值，那也为时已晚，因为此时请求可能更多，将队列和线程占满后只能被丢
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://www.zhechu.top/tags/Spring/"/>
    
      <category term="异步" scheme="http://www.zhechu.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="线程池" scheme="http://www.zhechu.top/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>行为型-模板方法模式</title>
    <link href="http://www.zhechu.top/2021/03/05/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.zhechu.top/2021/03/05/行为型-模板方法模式/</id>
    <published>2021-03-05T02:04:19.000Z</published>
    <updated>2021-03-05T03:04:29.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h2><p>定义一个操作中的算法骨架，将部分步骤延迟到子类中实现；使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。本质是<strong>固定算法骨架</strong>。</p><h2 id="2-结构"><a href="#2-结构" class="headerlink" title="2 结构"></a>2 结构</h2><table><thead><tr><th>角色</th><th>说明</th></tr></thead><tbody><tr><td>AbstractClass</td><td>抽象类，定义算法骨架和原语操作并提供算法中部分步骤的通用实现</td></tr><tr><td>ConcreteClass</td><td>实现类，实现算法骨架中的某些步骤，完成跟特定子类相关的功能</td></tr></tbody></table><h2 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3 优缺点"></a>3 优缺点</h2><p>优点</p><ol><li>代码复用</li></ol><p>缺点</p><ol><li>算法骨架不易升级</li></ol><h2 id="4-使用场景"><a href="#4-使用场景" class="headerlink" title="4 使用场景"></a>4 使用场景</h2><ol><li>需固定算法骨架，实现一个算法不变的部分，并将可变的行为由其子类实现</li><li>各个子类中具有公共行为，应该抽取出来，集中到公共类中实现，从而实现代码复用</li><li>需控制子类扩展的情况，模板方法模式会在特定时刻调用子类的方法，这样只允许在扩展这些方法</li></ol><h2 id="5-示例"><a href="#5-示例" class="headerlink" title="5 示例"></a>5 示例</h2><h3 id="5-1-封装请求重试"><a href="#5-1-封装请求重试" class="headerlink" title="5.1 封装请求重试"></a>5.1 封装请求重试</h3><h4 id="5-1-1-JDK1-8回调方式"><a href="#5-1-1-JDK1-8回调方式" class="headerlink" title="5.1.1 JDK1.8回调方式"></a>5.1.1 JDK1.8回调方式</h4><p>定义重试模板<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> exception.base.AuthenticationFailureException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestClientResponseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRpc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最大重试次数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发起请求，支持重试</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> supplier lambda 表达式函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回请求结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doRequestToSupportRetry</span><span class="params">(Supplier&lt;T&gt; supplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isRetry = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> retry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RestClientResponseException e) &#123;</span><br><span class="line">        isRetry = isRetry(e);</span><br><span class="line">        <span class="keyword">if</span> (!isRetry) &#123;</span><br><span class="line">          <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 支持重试，但重试次数已用完，则抛出权限异常</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (retry &gt;= MAX_RETRY) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationFailureException(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (isRetry &amp;&amp; retry++ &lt; MAX_RETRY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否支持重试</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> e 远程调用异常</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 布尔值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isRetry</span><span class="params">(RestClientResponseException e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> retry = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 具体判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retry;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRpc</span> <span class="keyword">extends</span> <span class="title">BaseRpc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取单个用户信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">getByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> doRequestToSupportRetry(() -&gt; &#123;</span><br><span class="line">      String url = String.format(</span><br><span class="line">          <span class="string">"%s/%s/user/getByUserName"</span>,</span><br><span class="line">          <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">          <span class="string">"userServiceName"</span></span><br><span class="line">      );</span><br><span class="line">      UriComponentsBuilder builder = UriComponentsBuilder</span><br><span class="line">          .fromUriString(url)</span><br><span class="line">          .queryParam(<span class="string">"userName"</span>, userName);</span><br><span class="line">      ResponseEntity&lt;Result&lt;User&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">          builder.build().encode().toUri(),</span><br><span class="line">          HttpMethod.GET,</span><br><span class="line">          <span class="keyword">new</span> ParameterizedTypeReference&lt;Result&lt;User&gt;&gt;() &#123;&#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.getBody();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-2-封装分页模板"><a href="#5-2-封装分页模板" class="headerlink" title="5.2 封装分页模板"></a>5.2 封装分页模板</h3><h4 id="5-2-1-普通分页"><a href="#5-2-1-普通分页" class="headerlink" title="5.2.1 普通分页"></a>5.2.1 普通分页</h4><p>定义分页模板，一般用于循环批量查询操作，如：缓存分批重建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTemplate</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取分页数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;E&gt; <span class="title">select</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 每页显示条数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 分页处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pageSize = getPageSize();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      List&lt;E&gt; list = select(page, pageSize);</span><br><span class="line">      <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line">      doHandle(list);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 若不满足每页条数，则为最后一页</span></span><br><span class="line">      <span class="keyword">if</span> (size &lt; pageSize) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只要每次分页查出来的数据不为空，那就页数+1 继续查询并转换</span></span><br><span class="line">      page ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行具体业务逻辑</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(List&lt;E&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同步用户缓存<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncUserToCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 分页处理</span></span><br><span class="line">  PageTemplate&lt;User&gt; pageTemplate = <span class="keyword">new</span> PageTemplate&lt;User&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;User&gt; <span class="title">select</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userService.select(page, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// TODO 具体同步逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  pageTemplate.handle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-2-2-按索引分页"><a href="#5-2-2-按索引分页" class="headerlink" title="5.2.2 按索引分页"></a>5.2.2 按索引分页</h4><p><strong>按索引（数值类型）在数据库本身的存储顺序进行分页查询，效率比普通分页要高，尤其是页数超10000+时</strong></p><p>定义分页模板，一般用于循环批量查询操作，如：缓存分批重建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于上一批索引分页模板类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexPageTemplate</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 基于上一批索引获取分页数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> lastBatchMaxId 最后一批最大ID</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> batchSize 每批数量</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;E&gt; <span class="title">select</span><span class="params">(Long lastBatchMaxId, <span class="keyword">int</span> batchSize)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 每批数量</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 分页处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分批更新</span></span><br><span class="line">    Long lastBatchMaxId = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">int</span> batchSize = getBatchSize();</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      List&lt;E&gt; list = select(</span><br><span class="line">        lastBatchMaxId,</span><br><span class="line">        batchSize</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      doHandle(list);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查是否为最后一批请求，若是则结束（减少处理最后一批后又去数据库取数据判断是否结束的开销）</span></span><br><span class="line">      <span class="keyword">int</span> size = list.size();</span><br><span class="line">      <span class="keyword">if</span> (size &lt; batchSize) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      lastBatchMaxId = getId(list.get(size - <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">if</span> (lastBatchMaxId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行具体业务逻辑</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(List&lt;E&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Long <span class="title">getId</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncUserToCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IndexPageTemplate&lt;User&gt; indexPageTemplate = <span class="keyword">new</span> IndexPageTemplate&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> List&lt;User&gt; <span class="title">select</span><span class="params">(Long lastBatchMaxId, <span class="keyword">int</span> batchSize)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> userService.select(lastBatchMaxId, batchSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO 具体同步逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Long <span class="title">getId</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user.getUserId();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    indexPageTemplate.handle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h2&gt;&lt;p&gt;定义一个操作中的算法骨架，将部分步骤延迟到子类中实现；使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。本质是
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="设计模式" scheme="http://www.zhechu.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>封装请求唯一ID</title>
    <link href="http://www.zhechu.top/2021/03/05/%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82%E5%94%AF%E4%B8%80ID/"/>
    <id>http://www.zhechu.top/2021/03/05/封装请求唯一ID/</id>
    <published>2021-03-05T01:18:48.000Z</published>
    <updated>2021-03-05T01:59:41.913Z</updated>
    
    <content type="html"><![CDATA[<p>问题：如何在日志文件或ELK日志平台快速搜索某次请求的相关日志</p><p>方案：封装请求唯一ID，并打印在每条日志记录中，且通过请求头或出参返回（方便拿到请求唯一ID）</p><table><thead><tr><th>环境</th><th>说明</th></tr></thead><tbody><tr><td>spring-boot-1.5.x</td><td>企业应用程序框架</td></tr><tr><td>log4j2</td><td>日志框架</td></tr></tbody></table><h2 id="1-添加过滤器"><a href="#1-添加过滤器" class="headerlink" title="1 添加过滤器"></a>1 添加过滤器</h2><p>请求唯一ID过滤器，用于生成唯一ID并放入日志上下文<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> domain.ResultMsg;</span><br><span class="line"><span class="keyword">import</span> util.UUIDUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>) <span class="comment">// 在所有自定义过滤器前面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>, filterName = <span class="string">"requestIdFilter"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestIdFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_ID = <span class="string">"RequestId"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">    HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止上游已存在请求唯一ID</span></span><br><span class="line">    String requestId = httpRequest.getHeader(REQUEST_ID);</span><br><span class="line">    <span class="keyword">if</span> (requestId == <span class="keyword">null</span>) &#123;</span><br><span class="line">      requestId = UUIDUtil.getUUID();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将请求唯一ID放入日志上下文</span></span><br><span class="line">    MDC.put(REQUEST_ID, requestId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放入请求头（冗余）</span></span><br><span class="line">    httpResponse.setHeader(REQUEST_ID, requestId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      RequestIdHttpServletResponseWrapper responseWrapper = <span class="keyword">new</span> RequestIdHttpServletResponseWrapper(httpResponse);</span><br><span class="line">      chain.doFilter(httpRequest, responseWrapper);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">byte</span>[] content = responseWrapper.getContent();</span><br><span class="line">      <span class="keyword">if</span> (content.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        String resultJson = <span class="keyword">new</span> String(content, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          ResultMsg resultMsg = JSONObject.parseObject(resultJson, ResultMsg<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">          resultMsg.setRequestId(requestId);</span><br><span class="line">          resultJson = JSONObject.toJSONString(resultMsg, SerializerFeature.WriteMapNullValue);</span><br><span class="line">          content = resultJson.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">// JSON 转换异常，表示返回的 body 不是 ResultMsg 类型格式，原封返回即可</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入到原始的响应</span></span><br><span class="line">      ServletOutputStream output = httpResponse.getOutputStream();</span><br><span class="line">      output.write(content);</span><br><span class="line">      output.flush();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      MDC.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义请求响应代理，用于截获下游响应并将请求ID写入出参<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.WriteListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponseWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestIdHttpServletResponseWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ByteArrayOutputStream output;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RequestIdHttpServletResponseWrapper</span><span class="params">(HttpServletResponse httpServletResponse)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(httpServletResponse);</span><br><span class="line">    output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletOutputStream() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener listener)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        output.write(b);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        output.write(b, off, len);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PrintWriter(output, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">byte</span>[] getContent() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> output.toByteArray();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-修改日志配置"><a href="#2-修改日志配置" class="headerlink" title="2 修改日志配置"></a>2 修改日志配置</h2><p>log4j2.xml 文件的 pattern 添加 <code>[%X{RequestId}]</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;configuration status="ERROR" monitorInterval="10"&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;property name="LOG_PATTERN" value="[%d&#123;HH:mm:ss:SSS&#125;] [%X&#123;RequestId&#125;] [%p] [%thread] - %l - %m%n" /&gt;</span><br><span class="line">    &lt;/Properties&gt;</span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;console name="Console" target="SYSTEM_OUT"&gt;</span><br><span class="line">            &lt;PatternLayout pattern="$&#123;LOG_PATTERN&#125;" /&gt;</span><br><span class="line">             &lt;ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY" /&gt;</span><br><span class="line">        &lt;/console&gt;</span><br><span class="line">        &lt;RollingFile name="RollingFileInfo" fileName="../logs/university-info.log"</span><br><span class="line">                     filePattern="../logs/$$&#123;date:yyyy-MM&#125;/log-%d&#123;yyyy-MM-dd&#125;-info-%i.log"&gt;</span><br><span class="line">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;</span><br><span class="line">            &lt;ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" /&gt;</span><br><span class="line">            &lt;PatternLayout pattern="$&#123;LOG_PATTERN&#125;" /&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy /&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size="100 MB" /&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">        &lt;/RollingFile&gt;</span><br><span class="line">        &lt;Async name="Async" includeLocation="true" bufferSize="1024"&gt;</span><br><span class="line">            &lt;appender-ref ref="Console" /&gt;</span><br><span class="line">            &lt;appender-ref ref="RollingFileInfo"/&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;logger name="org.springframework" level="ERROR"/&gt;</span><br><span class="line">        &lt;root level="ERROR"&gt;</span><br><span class="line">            &lt;appender-ref ref="Async" /&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-测试验证"><a href="#3-测试验证" class="headerlink" title="3 测试验证"></a>3 测试验证</h2><p>日志打印示例<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[17:46:02:683] [af665c8d2653422c9bf6f775ead27bea] [INFO] [http-nio-8888-exec-2] - core.aspect.WebLogAspect.around(WebLogAspect.java:60) -</span><br><span class="line">开始-------------------------------------------------------</span><br><span class="line">耗时: 20ms</span><br><span class="line">链路: http://127.0.0.1:8080/test controller.TestController.test</span><br><span class="line">参数: [hello]</span><br><span class="line">结束-------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>请求出参示例<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">"msg"</span>: <span class="string">"操作成功!"</span>,</span><br><span class="line">  <span class="attr">"requestId"</span>: <span class="string">"d27965161b4a4796bde15ebe205d62de"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"f627243077214e69b62a1b60be075d81"</span>,</span><br><span class="line">      <span class="attr">"createDate"</span>: <span class="number">1614760334000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：如何在日志文件或ELK日志平台快速搜索某次请求的相关日志&lt;/p&gt;
&lt;p&gt;方案：封装请求唯一ID，并打印在每条日志记录中，且通过请求头或出参返回（方便拿到请求唯一ID）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="日志" scheme="http://www.zhechu.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Jackson序列化优雅处理</title>
    <link href="http://www.zhechu.top/2020/11/09/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86/"/>
    <id>http://www.zhechu.top/2020/11/09/Jackson序列化优雅处理/</id>
    <published>2020-11-09T13:40:48.000Z</published>
    <updated>2020-11-09T15:52:59.358Z</updated>
    
    <content type="html"><![CDATA[<p>问题：</p><ol><li>服务端接口出参返回值为 null 的参数，接口调用方难以处理（有些编程语言处理起来很复杂）</li><li>服务端接口出参返回值为大数值，接口调用方对应的编程语言丢失精度</li></ol><p>方案：</p><ol><li>将返回 null 的参数过滤或赋默认值（如：空字符串）</li><li>将大数值的参数转为字符串</li></ol><p>代码示例</p><p><a href="https://github.com/zhechu/spring-boot-rest-demo/tree/master/src/main/java/com/wise/rest/demo/config/jackson" target="_blank" rel="noopener">https://github.com/zhechu/spring-boot-rest-demo/tree/master/src/main/java/com/wise/rest/demo/config/jackson</a></p><h2 id="1-序列化修改器"><a href="#1-序列化修改器" class="headerlink" title="1 序列化修改器"></a>1 序列化修改器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.BeanDescription;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationConfig;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.BeanPropertyWriter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.BeanSerializerModifier;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WiseBeanSerializerModifier</span> <span class="keyword">extends</span> <span class="title">BeanSerializerModifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;BeanPropertyWriter&gt; <span class="title">changeProperties</span><span class="params">(SerializationConfig config, BeanDescription beanDesc, List&lt;BeanPropertyWriter&gt; beanProperties)</span> </span>&#123;</span><br><span class="line">    beanProperties.forEach((writer) -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!writer.hasNullSerializer()) &#123;</span><br><span class="line">        JavaType type = writer.getType();</span><br><span class="line">        Class&lt;?&gt; clazz = type.getRawClass();</span><br><span class="line">        <span class="keyword">if</span> (type.isTypeOrSubTypeOf(Number<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">          writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.STRING_JSON_SERIALIZER);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.isTypeOrSubTypeOf(Boolean<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">          writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.BOOLEAN_JSON_SERIALIZER);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.isTypeOrSubTypeOf(Character<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">          writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.STRING_JSON_SERIALIZER);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.isTypeOrSubTypeOf(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">          writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.STRING_JSON_SERIALIZER);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!type.isArrayType() &amp;&amp; !clazz.isArray() &amp;&amp; !type.isTypeOrSubTypeOf(Collection<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (type.isTypeOrSubTypeOf(OffsetDateTime<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.STRING_JSON_SERIALIZER);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!type.isTypeOrSubTypeOf(Date<span class="class">.<span class="keyword">class</span>) &amp;&amp; !<span class="title">type</span>.<span class="title">isTypeOrSubTypeOf</span>(<span class="title">TemporalAccessor</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">            writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.OBJECT_JSON_SERIALIZER);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.STRING_JSON_SERIALIZER);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          writer.assignNullSerializer(WiseBeanSerializerModifier.NullJsonSerializers.ARRAY_JSON_SERIALIZER);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.changeProperties(config, beanDesc, beanProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NullJsonSerializers</span> </span>&#123;</span><br><span class="line">    JsonSerializer&lt;Object&gt; STRING_JSON_SERIALIZER = <span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeString(<span class="string">""</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    JsonSerializer&lt;Object&gt; NUMBER_JSON_SERIALIZER = <span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeNumber(-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    JsonSerializer&lt;Object&gt; BOOLEAN_JSON_SERIALIZER = <span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeObject(Boolean.FALSE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    JsonSerializer&lt;Object&gt; ARRAY_JSON_SERIALIZER = <span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeStartArray();</span><br><span class="line">        gen.writeEndArray();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    JsonSerializer&lt;Object&gt; OBJECT_JSON_SERIALIZER = <span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeStartObject();</span><br><span class="line">        gen.writeEndObject();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-大数值转字符串"><a href="#2-大数值转字符串" class="headerlink" title="2 大数值转字符串"></a>2 大数值转字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JacksonStdImpl;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.NumberSerializer;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonStdImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigNumberSerializer</span> <span class="keyword">extends</span> <span class="title">NumberSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> JS_NUM_MAX = <span class="number">9007199254740992L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> JS_NUM_MIN = -<span class="number">9007199254740992L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BigNumberSerializer instance = <span class="keyword">new</span> BigNumberSerializer(Number<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BigNumberSerializer</span><span class="params">(Class&lt;? extends Number&gt; rawType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(rawType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Number value, JsonGenerator gen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> longValue = value.longValue();</span><br><span class="line">    <span class="keyword">if</span> (longValue &gt;= JS_NUM_MIN &amp;&amp; longValue &lt;= JS_NUM_MAX) &#123;</span><br><span class="line">      <span class="keyword">super</span>.serialize(value, gen, provider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      gen.writeString(value.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端接口出参返回值为 null 的参数，接口调用方难以处理（有些编程语言处理起来很复杂）&lt;/li&gt;
&lt;li&gt;服务端接口出参返回值为大数值，接口调用方对应的编程语言丢失精度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将返
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="序列化" scheme="http://www.zhechu.top/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>RSA加密防破解</title>
    <link href="http://www.zhechu.top/2020/11/09/RSA%E5%8A%A0%E5%AF%86%E9%98%B2%E7%A0%B4%E8%A7%A3/"/>
    <id>http://www.zhechu.top/2020/11/09/RSA加密防破解/</id>
    <published>2020-11-09T13:39:38.000Z</published>
    <updated>2020-11-09T15:52:59.359Z</updated>
    
    <content type="html"><![CDATA[<p>问题：敏感接口不能暴露参数，并防篡改，如：登录接口</p><p>方案：通过非对称算法 RSA，由接口调用端通过公钥将参数进行加密，服务端接受参数通过私钥进行解密</p><p>原理：攻击者只有审查代码，才能知晓接口入参，目的是增加其攻击成本。而且可以防止中间人篡改入参（私钥是存在服务端，不容易泄露）</p><h2 id="1-非对称加密工具类"><a href="#1-非对称加密工具类" class="headerlink" title="1 非对称加密工具类"></a>1 非对称加密工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非对称加密工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-11-09 4:32 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 非对称密钥算法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">"RSA"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 密钥长度，在 512 到 65536 位之间，越长，速度越慢，生成的加密数据越长</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEY_SIZE = <span class="number">512</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> KeyPair 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyPair <span class="title">getKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getKeyPair(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> password 生成密钥对的密码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyPair <span class="title">getKeyPair</span><span class="params">(String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化密钥生成器</span></span><br><span class="line">    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(ALGORITHM);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化密钥生成器</span></span><br><span class="line">    <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">      keyPairGenerator.initialize(KEY_SIZE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      SecureRandom secureRandom = SecureRandom.getInstance(<span class="string">"SHA1PRNG"</span>);</span><br><span class="line">      secureRandom.setSeed(password.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">      keyPairGenerator.initialize(KEY_SIZE, secureRandom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keyPairGenerator.generateKeyPair();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取取私钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> keyPair 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 私钥</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getPrivateKeyBytes(KeyPair keyPair) &#123;</span><br><span class="line">    <span class="keyword">return</span> keyPair.getPrivate().getEncoded();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取取 Base64 编码的私钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> keyPair 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String Base64编码的私钥</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPrivateKey</span><span class="params">(KeyPair keyPair)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Base64.getEncoder().encodeToString(getPrivateKeyBytes(keyPair));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取取公钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> keyPair 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 公钥</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getPublicKeyBytes(KeyPair keyPair) &#123;</span><br><span class="line">    <span class="keyword">return</span> keyPair.getPublic().getEncoded();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取取 Base64 编码的公钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> keyPair 密钥对</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String Base64编码的公钥</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPublicKey</span><span class="params">(KeyPair keyPair)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Base64.getEncoder().encodeToString(getPublicKeyBytes(keyPair));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私钥加密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data       待加密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> privateKey 私钥字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 加密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByPrivateKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] privateKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 实例化密钥工厂</span></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">    <span class="comment">// 生成私钥</span></span><br><span class="line">    PrivateKey key = keyFactory.generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(privateKey));</span><br><span class="line">    <span class="comment">// 数据加密</span></span><br><span class="line">    Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私钥加密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data       待加密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> privateKey Base64编码的私钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String Base64编码的加密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptByPrivateKey</span><span class="params">(String data, String privateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] key = Base64.getDecoder().decode(privateKey);</span><br><span class="line">    <span class="keyword">return</span> Base64.getEncoder().encodeToString(encryptByPrivateKey(data.getBytes(StandardCharsets.UTF_8), key));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公钥加密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data      待加密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> publicKey 公钥字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 加密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByPublicKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] publicKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 实例化密钥工厂</span></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">    <span class="comment">// 生成公钥</span></span><br><span class="line">    PublicKey key = keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(publicKey));</span><br><span class="line">    <span class="comment">// 数据加密</span></span><br><span class="line">    Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公钥加密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data      待加密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> publicKey Base64编码的公钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String Base64编码的加密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptByPublicKey</span><span class="params">(String data, String publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] key = Base64.getDecoder().decode(publicKey);</span><br><span class="line">    <span class="keyword">return</span> Base64.getEncoder().encodeToString(encryptByPublicKey(data.getBytes(StandardCharsets.UTF_8), key));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私钥解密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data       待解密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> privateKey 私钥字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 解密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByPrivateKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] privateKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 实例化密钥工厂</span></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">    <span class="comment">// 生成私钥</span></span><br><span class="line">    PrivateKey key = keyFactory.generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(privateKey));</span><br><span class="line">    <span class="comment">// 数据解密</span></span><br><span class="line">    Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私钥解密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data       Base64编码的待解密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> privateKey Base64编码的私钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String 解密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByPrivateKey</span><span class="params">(String data, String privateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] key = Base64.getDecoder().decode(privateKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(decryptByPrivateKey(Base64.getDecoder().decode(data), key), StandardCharsets.UTF_8);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公钥解密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data      待解密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> publicKey 公钥字节数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> byte[] 解密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByPublicKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] publicKey) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 实例化密钥工厂</span></span><br><span class="line">    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">    <span class="comment">// 产生公钥</span></span><br><span class="line">    PublicKey key = keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(publicKey));</span><br><span class="line">    <span class="comment">// 数据解密</span></span><br><span class="line">    Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公钥解密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data      Base64编码的待解密数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> publicKey Base64编码的公钥</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> String 解密数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByPublicKey</span><span class="params">(String data, String publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] key = Base64.getDecoder().decode(publicKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(decryptByPublicKey(Base64.getDecoder().decode(data), key), StandardCharsets.UTF_8);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加密模式</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> Mode &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ENCRYPTION(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 兼容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    COMPATIBLE(),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-单元测试类"><a href="#2-单元测试类" class="headerlink" title="2 单元测试类"></a>2 单元测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    KeyPair keyPair = RSAUtil.getKeyPair();</span><br><span class="line"></span><br><span class="line">    String publicKey = RSAUtil.getPublicKey(keyPair);</span><br><span class="line">    log.info(<span class="string">"公钥:&#123;&#125;"</span>, publicKey);</span><br><span class="line">    <span class="comment">// MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIbfSsEOcHpA6j5NutN7t53ZqtIrpHIHrePN3imfWNOM88h+R0ribRvdn1QmEhqUb8+mORBDmVF9kg2L3554EiUCAwEAAQ==</span></span><br><span class="line"></span><br><span class="line">    String privateKey = RSAUtil.getPrivateKey(keyPair);</span><br><span class="line">    log.info(<span class="string">"私钥:&#123;&#125;"</span>, privateKey);</span><br><span class="line">    <span class="comment">// MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAht9KwQ5wekDqPk2603u3ndmq0iukcget483eKZ9Y04zzyH5HSuJtG92fVCYSGpRvz6Y5EEOZUX2SDYvfnngSJQIDAQABAkADb9Ex1jJbiyfs6oImPXLSXOeTb3VDSprNwUM2AE99JILheZ0hgRke/o28rjy9yz0kUnh3U74oLvgZ+vrClgVBAiEAulrlZ+TmUIk0CT0uculZORROFozIl9Oui62NEwSunskCIQC5RuQzO1WKAp3S6Uouq4/+sZfItvR+SJi3IUkvseM6fQIhAJSvKzPelMgTADqS3vl+Jtr80WT6hJ1mnnABU3qmFLDJAiBSQwGLJasDDcpZHK+NLStP4DYOLf08HKuBk8vU21ySWQIgV/3HX3bwxxcb+0Wt8T09dvz4rrQaKV9oqehJP/QzeY0=</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 公钥加密</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encryptTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 公钥</span></span><br><span class="line">    String publicKey = <span class="string">"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIbfSsEOcHpA6j5NutN7t53ZqtIrpHIHrePN3imfWNOM88h+R0ribRvdn1QmEhqUb8+mORBDmVF9kg2L3554EiUCAwEAAQ=="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数 JSON 字符串</span></span><br><span class="line">    String paramJsonStr = <span class="string">"&#123;\"username\":\"zhechu\",\"pwd\":\"zhechu123\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    String encrypt = RSAUtil.encryptByPublicKey(paramJsonStr, publicKey);</span><br><span class="line">    log.info(<span class="string">"encrypt:&#123;&#125;"</span>, encrypt);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私钥解密</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decryptTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 私钥</span></span><br><span class="line">    String privateKey = <span class="string">"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAht9KwQ5wekDqPk2603u3ndmq0iukcget483eKZ9Y04zzyH5HSuJtG92fVCYSGpRvz6Y5EEOZUX2SDYvfnngSJQIDAQABAkADb9Ex1jJbiyfs6oImPXLSXOeTb3VDSprNwUM2AE99JILheZ0hgRke/o28rjy9yz0kUnh3U74oLvgZ+vrClgVBAiEAulrlZ+TmUIk0CT0uculZORROFozIl9Oui62NEwSunskCIQC5RuQzO1WKAp3S6Uouq4/+sZfItvR+SJi3IUkvseM6fQIhAJSvKzPelMgTADqS3vl+Jtr80WT6hJ1mnnABU3qmFLDJAiBSQwGLJasDDcpZHK+NLStP4DYOLf08HKuBk8vU21ySWQIgV/3HX3bwxxcb+0Wt8T09dvz4rrQaKV9oqehJP/QzeY0="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密字符串</span></span><br><span class="line">    String encrypt = <span class="string">"WB+XDRgCStNTw54ktN+qJCKo3J2xXpQtRSNfgdbo9mMd8nuaveRpPihYtF7JkX9f9eoSzVG9GG2OyaDe8dhPFA=="</span>;</span><br><span class="line"></span><br><span class="line">    String paramJsonStr = RSAUtil.decryptByPrivateKey(encrypt, privateKey);</span><br><span class="line">    log.info(<span class="string">"paramJsonStr:&#123;&#125;"</span>, paramJsonStr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-过滤器解密处理"><a href="#3-过滤器解密处理" class="headerlink" title="3 过滤器解密处理"></a>3 过滤器解密处理</h2><h3 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA 解密过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-11-09 3:04 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaDecryptFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RsaProperties rsaProperties;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 需要解密的请求</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] URL_PATTERNS = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">      <span class="string">"/api/wechatMiniUser/registerByCode"</span>,</span><br><span class="line">      <span class="string">"/api/mobile/registerByCode"</span>,</span><br><span class="line">      <span class="string">"/api/mobile/resetPasswordByCode"</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">    <span class="comment">// 非 POST 请求则跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(<span class="string">"POST"</span>, httpServletRequest.getMethod())) &#123;</span><br><span class="line">      filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String uri = httpServletRequest.getRequestURI();</span><br><span class="line">    <span class="keyword">int</span> pathLen = URL_PATTERNS.length;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pathLen; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (uri.equals(URL_PATTERNS[i])) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (URL_PATTERNS[i].endsWith(<span class="string">"*"</span>) &amp;&amp; uri.startsWith(URL_PATTERNS[i].replace(<span class="string">"*"</span>,<span class="string">""</span>))) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非加密请求</span></span><br><span class="line">    <span class="keyword">if</span> (i == pathLen) &#123;</span><br><span class="line">      filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RsaDecryptHttpServletRequestWrapper rsaDecryptHttpServletRequestWrapper = <span class="keyword">new</span> RsaDecryptHttpServletRequestWrapper(httpServletRequest);</span><br><span class="line">    BufferedReader bufferedReader = rsaDecryptHttpServletRequestWrapper.getReader();</span><br><span class="line">    String encrypt = convertToString(bufferedReader);</span><br><span class="line">    log.info(<span class="string">"&#123;&#125; encrypt body:&#123;&#125;"</span>, httpServletRequest.getRequestURI(), encrypt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// body 没有数据</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(encrypt)) &#123;</span><br><span class="line">      String defaultErrorMsg = ExceptionTypeEnum.BusinessValidationException.getDefaultErrorMsg();</span><br><span class="line">      Integer code = ExceptionTypeEnum.BusinessValidationException.getCode();</span><br><span class="line">      ResultMsg resultMsg = ResultMsg.error(code, defaultErrorMsg);</span><br><span class="line">      servletResponse.getWriter().print(JSONObject.toJSON(resultMsg));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若是兼容模式，则判断是否需要解密</span></span><br><span class="line">    <span class="keyword">if</span> (RSAUtil.Mode.COMPATIBLE == rsaProperties.getMode()</span><br><span class="line">        &amp;&amp; StringUtils.startsWith(encrypt, <span class="string">"&#123;"</span>)</span><br><span class="line">        &amp;&amp; StringUtils.endsWith(encrypt, <span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">      filterChain.doFilter(rsaDecryptHttpServletRequestWrapper, servletResponse);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 解密</span></span><br><span class="line">      String decrypt = RSAUtil.decryptByPrivateKey(encrypt, rsaProperties.getPrivateKey());</span><br><span class="line">      log.info(<span class="string">"&#123;&#125; decrypt body:&#123;&#125;"</span>, httpServletRequest.getRequestURI(), decrypt);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 覆盖加密的数据</span></span><br><span class="line">      rsaDecryptHttpServletRequestWrapper.setBody(decrypt.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(<span class="string">"非对称解密失败"</span>, e);</span><br><span class="line">      ResultMsg resultMsg = ResultMsg.error(ExceptionTypeEnum.BusinessValidationException);</span><br><span class="line">      servletResponse.getWriter().print(JSONObject.toJSON(resultMsg));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(rsaDecryptHttpServletRequestWrapper, servletResponse);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将流转成字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> br 缓冲流</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">convertToString</span><span class="params">(BufferedReader br)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String inputLine;</span><br><span class="line">      <span class="keyword">while</span> ((inputLine = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(inputLine);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      log.error(<span class="string">"读取请求流失败"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          log.error(<span class="string">"关闭请求流失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-请求包装"><a href="#3-2-请求包装" class="headerlink" title="3.2 请求包装"></a>3.2 请求包装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA 解密请求包装</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-11-09 3:09 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaDecryptHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于保存 body 中数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RsaDecryptHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(request);</span><br><span class="line">    body = StreamUtils.copyToByteArray(request.getInputStream());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(body);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener arg0)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(<span class="keyword">byte</span>[] body)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = body;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-加密属性配置"><a href="#3-3-加密属性配置" class="headerlink" title="3.3 加密属性配置"></a>3.3 加密属性配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA 加密配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-11-09 6:09 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"rsa"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 秘钥</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加密模式，默认为加密</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> RSAUtil.Mode mode = RSAUtil.Mode.ENCRYPTION;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：敏感接口不能暴露参数，并防篡改，如：登录接口&lt;/p&gt;
&lt;p&gt;方案：通过非对称算法 RSA，由接口调用端通过公钥将参数进行加密，服务端接受参数通过私钥进行解密&lt;/p&gt;
&lt;p&gt;原理：攻击者只有审查代码，才能知晓接口入参，目的是增加其攻击成本。而且可以防止中间人篡改入参（私
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="算法" scheme="http://www.zhechu.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="安全" scheme="http://www.zhechu.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Github克隆加速</title>
    <link href="http://www.zhechu.top/2020/11/03/Github%E5%85%8B%E9%9A%86%E5%8A%A0%E9%80%9F/"/>
    <id>http://www.zhechu.top/2020/11/03/Github克隆加速/</id>
    <published>2020-11-03T13:29:39.000Z</published>
    <updated>2020-11-03T13:32:15.959Z</updated>
    
    <content type="html"><![CDATA[<p>问题：墙内 clone github 上的项目到本地非常慢</p><p>方案：本地 git 配置 Shadowsocks 代理（<strong>前置条件是本地有 Shadowsocks 代理</strong>）</p><h2 id="1-socks5"><a href="#1-socks5" class="headerlink" title="1 socks5"></a>1 socks5</h2><p>需要确定安装的 Shadowsocks 是基于 socks5 协议代理的，需将 1080 端口修改成本地代理端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line"><span class="meta">$</span> git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><h2 id="2-http"><a href="#2-http" class="headerlink" title="2 http"></a>2 http</h2><p>需要确定安装的 Shadowsocks 是基于 http 协议代理的，需将 1081 端口修改成本地代理端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global http.proxy http://127.0.0.1:1081</span><br><span class="line"><span class="meta">$</span> git config --global https.proxy https://127.0.0.1:1081</span><br></pre></td></tr></table></figure></p><h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h2><p>查看 git 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config http.proxy</span><br><span class="line"><span class="meta">$</span> git config https.proxy</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：可执行 <code>git clone https://github.com/zhechu/spring-cloud-dubbo-demo.git</code> 验证是否有加速效果</p></blockquote><h2 id="4-重置-git-配置"><a href="#4-重置-git-配置" class="headerlink" title="4 重置 git 配置"></a>4 重置 git 配置</h2><p>在不需要代理时，可以重置代理设置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global --unset http.proxy</span><br><span class="line"><span class="meta">$</span> git config --global --unset https.proxy</span><br></pre></td></tr></table></figure></p><p>查看 git 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config http.proxy</span><br><span class="line"><span class="meta">$</span> git config https.proxy</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：没有输出表示重置成功（本质是 ~/.gitconfig 配置文件删除了这两项配置）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：墙内 clone github 上的项目到本地非常慢&lt;/p&gt;
&lt;p&gt;方案：本地 git 配置 Shadowsocks 代理（&lt;strong&gt;前置条件是本地有 Shadowsocks 代理&lt;/strong&gt;）&lt;/p&gt;
&lt;h2 id=&quot;1-socks5&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Git" scheme="http://www.zhechu.top/categories/Git/"/>
    
    
      <category term="加速器" scheme="http://www.zhechu.top/tags/%E5%8A%A0%E9%80%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud&amp;Dubbo&amp;Nacos集成</title>
    <link href="http://www.zhechu.top/2020/08/13/SpringCloud-Dubbo-Nacos%E9%9B%86%E6%88%90/"/>
    <id>http://www.zhechu.top/2020/08/13/SpringCloud-Dubbo-Nacos集成/</id>
    <published>2020-08-13T14:37:10.000Z</published>
    <updated>2020-11-03T13:04:34.209Z</updated>
    
    <content type="html"><![CDATA[<p>版本说明</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明</a></p><table><thead><tr><th style="text-align:center">Spring Cloud</th><th>Spring Boot</th><th>Spring Cloud Alibaba</th><th style="text-align:center">Dubbo</th><th>Nacos</th></tr></thead><tbody><tr><td style="text-align:center">Hoxton.SR3</td><td>2.2.5.RELEASE</td><td>2.2.1.RELEASE</td><td style="text-align:center">2.7.6</td><td>1.2.1</td></tr></tbody></table><p>SpringCloud 官方文档</p><p><a href="https://spring.io/projects/spring-cloud#learn" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#learn</a></p><p>Dubbo 官方文档</p><p><a href="https://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">https://dubbo.apache.org/zh-cn/docs/user/quick-start.html</a></p><p>Nacos 官方文档</p><p><a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/quick-start.html</a></p><p>参考文档</p><p><a href="http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/" target="_blank" rel="noopener">http://www.iocoder.cn/Spring-Cloud-Alibaba/Dubbo/</a></p><p>示例代码</p><p><a href="https://github.com/zhechu/spring-cloud-dubbo-demo" target="_blank" rel="noopener">https://github.com/zhechu/spring-cloud-dubbo-demo</a></p><h2 id="1-安装-Nacos"><a href="#1-安装-Nacos" class="headerlink" title="1 安装 Nacos"></a>1 安装 Nacos</h2><p>基于 docker 安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum -y install git</span><br><span class="line"><span class="meta">$</span> git clone -b 1.2.1 https://github.com/nacos-group/nacos-docker.git</span><br><span class="line"><span class="meta">$</span> cd nacos-docker</span><br></pre></td></tr></table></figure></p><p>修改镜像版本为 <strong>1.2.1</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi ./example/standalone-derby.yaml</span><br><span class="line">services:</span><br><span class="line">  nacos:</span><br><span class="line">    image: nacos/nacos-server:1.2.1</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker-compose -f ./example/standalone-derby.yaml up</span><br></pre></td></tr></table></figure></p><p>浏览器访问</p><p><a href="http://192.168.163.21:8848/nacos/" target="_blank" rel="noopener">http://192.168.163.21:8848/nacos/</a></p><p>nacos/nacos</p><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/nacos_index.png" alt></p><h2 id="2-集成"><a href="#2-集成" class="headerlink" title="2 集成"></a>2 集成</h2><h3 id="2-1-Nacos-配置"><a href="#2-1-Nacos-配置" class="headerlink" title="2.1 Nacos 配置"></a>2.1 Nacos 配置</h3><h4 id="2-1-1-添加提供者配置"><a href="#2-1-1-添加提供者配置" class="headerlink" title="2.1.1 添加提供者配置"></a>2.1.1 添加提供者配置</h4><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/nacos_create_provider_properties_1.png" alt></p><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/nacos_create_provider_properties_2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br><span class="line">dubbo.scan.base-packages=com.wise.dubbo.provider.service</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=-1</span><br><span class="line">dubbo.registry.address=spring-cloud://$&#123;spring.cloud.nacos.config.server-addr&#125;</span><br><span class="line"># 不订阅任何服务，默认订阅所有服务</span><br><span class="line">dubbo.cloud.subscribed-services=&apos;&apos;</span><br><span class="line">spring.cloud.nacos.discovery.server-addr=$&#123;spring.cloud.nacos.config.server-addr&#125;</span><br><span class="line">spring.main.allow-bean-definition-overriding=true</span><br></pre></td></tr></table></figure><h4 id="2-1-2-添加消费者配置"><a href="#2-1-2-添加消费者配置" class="headerlink" title="2.1.2 添加消费者配置"></a>2.1.2 添加消费者配置</h4><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/nacos_create_consumer_properties.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.port=8091</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=-1</span><br><span class="line">dubbo.registry.address=spring-cloud://$&#123;spring.cloud.nacos.config.server-addr&#125;</span><br><span class="line">dubbo.cloud.subscribed-services=dubbo-provider</span><br><span class="line">dubbo.consumer.check=false</span><br><span class="line">spring.cloud.nacos.discovery.server-addr=$&#123;spring.cloud.nacos.config.server-addr&#125;</span><br><span class="line">spring.main.allow-bean-definition-overriding=true</span><br></pre></td></tr></table></figure><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/spring_cloud_dubbo_demo.png" alt></p><p>spring-cloud-dubbo-demo pom.xml 配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;dubbo-api&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-provider&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;dubbo-consumer&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.wise&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-dubbo-demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;spring-cloud-dubbo-demo&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Hoxton.SR3&lt;/spring-cloud.version&gt;</span><br><span class="line">        &lt;spring-boot.version&gt;2.2.5.RELEASE&lt;/spring-boot.version&gt;</span><br><span class="line">        &lt;spring-cloud-alibaba.version&gt;2.2.1.RELEASE&lt;/spring-cloud-alibaba.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-1-提供者"><a href="#2-2-1-提供者" class="headerlink" title="2.2.1 提供者"></a>2.2.1 提供者</h4><p>dubbo-provider pom.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.wise&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dubbo-demo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-provider&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;dubbo-provider&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.wise&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>本地 bootstrap.properties 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Nacos 地址</span><br><span class="line">spring.cloud.nacos.config.server-addr=192.168.163.21:8848</span><br><span class="line"># 服务名，也是 Nacos 配置文件名的组成部分</span><br><span class="line">spring.application.name=dubbo-provider</span><br><span class="line"># 环境标识，也是 Nacos 配置文件名的组成部分</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"># Nacos 配置文件扩展名</span><br><span class="line">spring.cloud.nacos.config.file-extension=properties</span><br><span class="line"># 是否支持实时刷新，默认为true</span><br><span class="line">spring.cloud.nacos.config.refresh-enabled=true</span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 17:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wise.dubbo.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-2-消费者"><a href="#2-2-2-消费者" class="headerlink" title="2.2.2 消费者"></a>2.2.2 消费者</h4><p>dubbo-consumer pom.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.wise&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dubbo-demo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-consumer&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;dubbo-consumer&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.wise&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>本地 bootstrap.properties 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.nacos.config.server-addr=192.168.163.21:8848</span><br><span class="line">spring.application.name=dubbo-consumer</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line">spring.cloud.nacos.config.file-extension=properties</span><br><span class="line">spring.cloud.nacos.config.refresh-enabled=true</span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 浏览器访问</span></span><br><span class="line"><span class="comment"> * http://127.0.0.1:8091/hello</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 23:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wise.dubbo.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hello(<span class="string">"Dubbo!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3 测试"></a>2.2.3 测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl http://127.0.0.1:8091/hello</span><br></pre></td></tr></table></figure><p><img src="/2020/08/13/SpringCloud-Dubbo-Nacos集成/curl_hello.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;版本说明&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alibaba
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://www.zhechu.top/tags/Spring/"/>
    
      <category term="微服务" scheme="http://www.zhechu.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="注册中心" scheme="http://www.zhechu.top/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
      <category term="SpringCloud" scheme="http://www.zhechu.top/tags/SpringCloud/"/>
    
      <category term="配置中心" scheme="http://www.zhechu.top/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Java代码规范</title>
    <link href="http://www.zhechu.top/2020/08/01/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://www.zhechu.top/2020/08/01/Java代码规范/</id>
    <published>2020-07-31T16:26:06.000Z</published>
    <updated>2020-11-03T13:04:34.150Z</updated>
    
    <content type="html"><![CDATA[<p>代码示例</p><p><a href="https://github.com/zhechu/spring-boot-rest-demo" target="_blank" rel="noopener">https://github.com/zhechu/spring-boot-rest-demo</a></p><h2 id="1-分层职责"><a href="#1-分层职责" class="headerlink" title="1 分层职责"></a>1 分层职责</h2><table><thead><tr><th style="text-align:center">层</th><th>包路径</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">Controller</td><td>com.xxx.controller</td><td>入参和出参处理，包括校验入参和聚合出参</td></tr><tr><td style="text-align:center">RPC</td><td>com.xxx.rpc</td><td>RPC 调用</td></tr><tr><td style="text-align:center">Service</td><td>com.xxx.service</td><td>具体业务处理，包括本地事务控制</td></tr><tr><td style="text-align:center">Dao</td><td>com.xxx.dao</td><td>持久化处理</td></tr><tr><td style="text-align:center">Mapper</td><td>com.xxx.dao.mapper</td><td>持久化处理，方便扩展，如：复杂查询，需手写 SQL 实现</td></tr></tbody></table><h2 id="2-领域模型"><a href="#2-领域模型" class="headerlink" title="2 领域模型"></a>2 领域模型</h2><table><thead><tr><th>领域模型</th><th>命名方式</th><th style="text-align:right">示例</th><th>说明</th></tr></thead><tbody><tr><td>DO（Data Object）</td><td>&lt;表名+DO&gt;</td><td style="text-align:right">UserDO</td><td>此对象与数据库表结构一一对应</td></tr><tr><td>BO（Business Object）</td><td>&lt;表名+BO&gt;</td><td style="text-align:right">UserBO</td><td>业务对象，处理对象内部业务逻辑</td></tr><tr><td>DVO（Data Validate Object）</td><td>&lt;方法名+DVO&gt;</td><td style="text-align:right">UserLoginDVO</td><td>数据校验对象</td></tr><tr><td>DTO（Data Transfer Object）</td><td>&lt;方法名+DTO&gt;</td><td style="text-align:right">UserUpdateDTO</td><td>新增/修改入参对象</td></tr><tr><td>QO（Query Object）</td><td>&lt;方法名+QO&gt;</td><td style="text-align:right">UserQO</td><td>查询入参对象（不与 DTO 共用，只服务查询接口）</td></tr><tr><td>VO（Response Object）</td><td>&lt;方法名+VO&gt;</td><td style="text-align:right">UserVO</td><td>返回对象</td></tr></tbody></table><blockquote><p>数据校验一般放在聚合层，所以DVO类切勿共享，其只服务于开放出去的接口层（一般为聚合层的Controller层）</p></blockquote><h2 id="3-注释规范"><a href="#3-注释规范" class="headerlink" title="3 注释规范"></a>3 注释规范</h2><h3 id="3-1-IDEA-注释模板设置"><a href="#3-1-IDEA-注释模板设置" class="headerlink" title="3.1 IDEA 注释模板设置"></a>3.1 IDEA 注释模板设置</h3><blockquote><p>新建类时的注释模板</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse("File Header.java")</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* $&#123;description&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/01/Java代码规范/idea_template_class.png" alt="image"></p><hr><blockquote><p>类的注释模板（快捷键为 ccmm）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> $date$ $time$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/01/Java代码规范/idea_template_class_ccmm.png" alt="image"></p><p><img src="/2020/08/01/Java代码规范/idea_template_class_ccmm_use.png" alt="image"></p><hr><blockquote><p>方法的注释模板（快捷键为 /**）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line">$params$</span><br><span class="line"> * <span class="meta">@return</span> $<span class="keyword">return</span>$</span><br><span class="line"> * <span class="meta">@author</span> lingyuwang</span><br><span class="line"> * <span class="meta">@date</span> $date$ $time$</span><br><span class="line"> * <span class="meta">@since</span> <span class="number">1.0</span><span class="number">.4</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/2020/08/01/Java代码规范/idea_template_method.png" alt="image"></p><p><img src="/2020/08/01/Java代码规范/idea_template_method_use.png" alt="image"></p><blockquote><p>注意：<code>@since</code> 是当前版本号。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码示例&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhechu/spring-boot-rest-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zhechu/spring-boo
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>RESTful接口设计规范</title>
    <link href="http://www.zhechu.top/2020/07/27/RESTful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://www.zhechu.top/2020/07/27/RESTful接口设计规范/</id>
    <published>2020-07-27T15:35:15.000Z</published>
    <updated>2020-11-03T13:04:34.182Z</updated>
    
    <content type="html"><![CDATA[<p>代码示例</p><p><a href="https://github.com/zhechu/spring-boot-rest-demo" target="_blank" rel="noopener">https://github.com/zhechu/spring-boot-rest-demo</a></p><h2 id="1-接口规范"><a href="#1-接口规范" class="headerlink" title="1 接口规范"></a>1 接口规范</h2><table><thead><tr><th style="text-align:center">描述</th><th>路径</th><th>示例</th><th style="text-align:center">方法</th><th>入参</th><th>返回值</th></tr></thead><tbody><tr><td style="text-align:center">添加资源</td><td>/&lt;资源名称&gt;</td><td>/user</td><td style="text-align:center">POST</td><td>需添加的资源对象</td><td>资源唯一ID</td></tr><tr><td style="text-align:center">批量添加</td><td>/&lt;资源名称&gt;/batch</td><td>/user/batch</td><td style="text-align:center">POST</td><td>需添加的资源对象集合</td><td>资源唯一ID集合</td></tr><tr><td style="text-align:center">删除资源</td><td>/&lt;资源名称&gt;/&lt;资源唯一ID&gt;</td><td>/user/1</td><td style="text-align:center">DELETE</td><td>资源唯一ID</td><td>成功删除条数</td></tr><tr><td style="text-align:center">更新资源</td><td>/&lt;资源名称&gt;</td><td>/user</td><td style="text-align:center">PUT</td><td>需更新的资源对象</td><td>成功更新条数</td></tr><tr><td style="text-align:center">批量更新</td><td>/&lt;资源名称&gt;/batch</td><td>/user/batch</td><td style="text-align:center">PUT</td><td>需更新的资源对象集合</td><td>成功更新条数</td></tr><tr><td style="text-align:center">单条查询</td><td>/&lt;资源名称&gt;/&lt;资源唯一ID&gt;</td><td>/user/3</td><td style="text-align:center">GET</td><td>资源唯一ID</td><td>资源对象</td></tr><tr><td style="text-align:center">单条查询</td><td>/&lt;资源名称&gt;/&lt;另一资源唯一属性名称&gt;/&lt;资源属性值&gt;</td><td>/user/username/zhangsan</td><td style="text-align:center">GET</td><td>资源属性值</td><td>资源对象</td></tr><tr><td style="text-align:center">批量查询</td><td>/&lt;资源名称&gt;</td><td>/user</td><td style="text-align:center">GET</td><td>筛选条件对象</td><td>资源对象集合</td></tr></tbody></table><blockquote><ol><li><p>上述基本遵循 RESTful 接口设计规范，但为了实用，有部分扩展</p></li><li><p>添加资源返回资源唯一ID，方便接口调用者再次发起请求获取资源（若有需要）</p></li><li><p>批量删除和更新操作返回成功操作条数，是为了兼容某些框架，并方便提示调用者</p></li><li><p>批量删除可以复用删除资源接口，将资源唯一ID替换为资源唯一ID加逗号分割（若非必不得已，切勿设计批量删除接口，或者批量数据设计不应超过100条），如：/user/1,2,3</p></li><li><p>批量查询需满足按分页查询和不按分页查询两种情况，当分页入参 <code>pageIndex=-1&amp;pageSize=-1</code> 时，则不按分页查询，但需控制最多返回条数（如：每次最多返回1000条）</p></li><li><p>若返回的资源对象存在 <code>Long</code> 类型属性，转为 <code>JSON</code> 格式时需是字符串，以免造成精度丢失（如：JavaScript 存不下 <code>Long</code> 类型长度数值）；入参对象若存在 <code>Long</code> 类型属性，要求客户端请求时传字符串（可以使用统一的编解码器处理）</p></li></ol></blockquote><h2 id="2-入参示例"><a href="#2-入参示例" class="headerlink" title="2 入参示例"></a>2 入参示例</h2><p>包含 Long 和 Date 类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Range;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.ScriptAssert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询活动参数校验类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-07-10 10:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1.3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ScriptAssert</span>(</span><br><span class="line">        lang = <span class="string">"javascript"</span>,</span><br><span class="line">        script = <span class="string">"_this.luckDrawStartTime == null || _this.luckDrawEndTime == null || _this.luckDrawStartTime.getTime() &lt;= _this.luckDrawEndTime.getTime()"</span>,</span><br><span class="line">        message = <span class="string">"抽奖开始时间不能大于抽奖结束时间"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityBatchGetDVO</span> <span class="keyword">extends</span> <span class="title">PageBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 活动ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Range</span></span><br><span class="line">    <span class="keyword">private</span> Long activityId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Size</span>(max = <span class="number">20</span>, message = <span class="string">"用户名称不能超过20个字符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽奖开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date luckDrawStartTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽奖结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date luckDrawEndTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>客户端传字符串时，是可以转 Long 类型的（SpringBoot框架已提供支持）</p></blockquote><h2 id="3-出参示例"><a href="#3-出参示例" class="headerlink" title="3 出参示例"></a>3 出参示例</h2><p>包含 Long 和 Date 类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4205425299355062593L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = ToStringSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Long</span> <span class="title">userId</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-使用-GET-方法实现批量查询"><a href="#4-使用-GET-方法实现批量查询" class="headerlink" title="4 使用 GET 方法实现批量查询"></a>4 使用 GET 方法实现批量查询</h2><a href="/2020/04/16/SpringBoot使用GET请求实现多条件查询/" title="SpringBoot使用GET请求实现多条件查询">SpringBoot使用GET请求实现多条件查询</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码示例&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhechu/spring-boot-rest-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/zhechu/spring-boo
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范</title>
    <link href="http://www.zhechu.top/2020/07/27/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://www.zhechu.top/2020/07/27/Git提交规范/</id>
    <published>2020-07-27T14:51:26.000Z</published>
    <updated>2020-11-03T13:04:34.083Z</updated>
    
    <content type="html"><![CDATA[<ol><li>提交时间点：单个功能开发完，且单元测试成功之后，按照功能点提交</li><li>注释格式：前缀 + “:” + 功能点描述</li><li>提交步骤：<code>commit</code>（本地提交一个或多个） -&gt; <code>pull</code>（若有冲突需要谨慎解决） -&gt; <code>push</code></li></ol><blockquote><p>提交步骤反例：<code>pull</code>（此时本地代码还未<code>commit</code>，开发工具可能会自动合并代码，导致部分代码丢失） -&gt; <code>commit</code> -&gt; <code>push</code></p></blockquote><table><thead><tr><th>前缀</th><th>说明</th><th>提交示例</th></tr></thead><tbody><tr><td>feature</td><td>新功能</td><td>feature:用户登录接口</td></tr><tr><td>fix</td><td>修复 BUG</td><td>fix:单点登录接口入参校验BUG</td></tr><tr><td>test</td><td>添加测试用例</td><td>test:用户注册</td></tr><tr><td>refactor</td><td>重构</td><td>refactor:分页插件</td></tr><tr><td>revert</td><td>恢复到某个提交点</td><td>revert:fix:单点登录接口入参校验BUG</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;提交时间点：单个功能开发完，且单元测试成功之后，按照功能点提交&lt;/li&gt;
&lt;li&gt;注释格式：前缀 + “:” + 功能点描述&lt;/li&gt;
&lt;li&gt;提交步骤：&lt;code&gt;commit&lt;/code&gt;（本地提交一个或多个） -&amp;gt; &lt;code&gt;pull&lt;/code&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://www.zhechu.top/categories/Git/"/>
    
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>微服务内部调用规范</title>
    <link href="http://www.zhechu.top/2020/07/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://www.zhechu.top/2020/07/26/微服务内部调用规范/</id>
    <published>2020-07-26T04:17:14.000Z</published>
    <updated>2020-11-03T13:04:34.286Z</updated>
    
    <content type="html"><![CDATA[<p>目标：规范微服务各层之间调用，提高系统扩展性、可维护性和性能（各层职责分明，引入多线程，甚至可以提高系统吞吐量）</p><p><img src="/2020/07/26/微服务内部调用规范/system_internal_call.png" alt></p><table><thead><tr><th>流程</th><th>说明</th></tr></thead><tbody><tr><td>过滤器/拦截器 -&gt; 事件总线</td><td>示例：实时拦截非法请求，发邮件/短信通知相关人员</td></tr><tr><td>控制器 -&gt; 事件总线</td><td>示例：收集用户行为数据（需判断请求是否成功，适合在此层处理），并通过异步持久化到磁盘</td></tr><tr><td>服务层 -&gt; 事件总线</td><td>示例：解耦同层间调用（同层调用容易混乱，且存在循环依赖风险），支持同步和异步方式</td></tr><tr><td>事件总线 -&gt; 消息中间件发送出口</td><td>禁止控制层/服务层直接调用消息中间件API，将调用远程API的各种异常统一交给消息中间件发送出口处理（如消息发送降级处理）</td></tr><tr><td>消息中间件监听入口 -&gt; 事件总线</td><td>可以做消息幂等处理（消息幂等不属于消息中间件职责）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目标：规范微服务各层之间调用，提高系统扩展性、可维护性和性能（各层职责分明，引入多线程，甚至可以提高系统吞吐量）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/07/26/微服务内部调用规范/system_internal_call.png&quot; alt&gt;&lt;/p&gt;
&lt;table
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="微服务" scheme="http://www.zhechu.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="规范" scheme="http://www.zhechu.top/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="架构" scheme="http://www.zhechu.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Mysql工具集</title>
    <link href="http://www.zhechu.top/2020/07/01/Mysql%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <id>http://www.zhechu.top/2020/07/01/Mysql工具集/</id>
    <published>2020-06-30T16:13:08.000Z</published>
    <updated>2020-11-03T13:04:34.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-pt-kill"><a href="#1-pt-kill" class="headerlink" title="1 pt-kill"></a>1 pt-kill</h2><h2 id="2-pt-query-digest"><a href="#2-pt-query-digest" class="headerlink" title="2 pt-query-digest"></a>2 pt-query-digest</h2><h2 id="3-gh-ost"><a href="#3-gh-ost" class="headerlink" title="3 gh-ost"></a>3 gh-ost</h2><p>官方文档</p><p><a href="https://github.com/github/gh-ost" target="_blank" rel="noopener">https://github.com/github/gh-ost</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-pt-kill&quot;&gt;&lt;a href=&quot;#1-pt-kill&quot; class=&quot;headerlink&quot; title=&quot;1 pt-kill&quot;&gt;&lt;/a&gt;1 pt-kill&lt;/h2&gt;&lt;h2 id=&quot;2-pt-query-digest&quot;&gt;&lt;a href=&quot;#2-pt-que
      
    
    </summary>
    
      <category term="Mysql" scheme="http://www.zhechu.top/categories/Mysql/"/>
    
    
      <category term="工具" scheme="http://www.zhechu.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mysql配置优化</title>
    <link href="http://www.zhechu.top/2020/06/29/Mysql%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://www.zhechu.top/2020/06/29/Mysql配置优化/</id>
    <published>2020-06-29T15:25:07.000Z</published>
    <updated>2020-11-03T13:04:34.179Z</updated>
    
    <content type="html"><![CDATA[<p>环境说明</p><table><thead><tr><th>环境</th><th>说明</th></tr></thead><tbody><tr><td>Mysql-5.6.45-log</td><td>关系型数据库</td></tr></tbody></table><h2 id="1-线程"><a href="#1-线程" class="headerlink" title="1 线程"></a>1 线程</h2><p>官方文档</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/show-processlist.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/show-processlist.html</a></p><p>查看正在运行的线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW FULL PROCESSLIST</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：Command 列显示为 “Sleep” 表示连接空闲，由 <code>wait_timeout</code> 参数控制，默认 8 小时空闲连接断开</p></blockquote><h2 id="2-连接"><a href="#2-连接" class="headerlink" title="2 连接"></a>2 连接</h2><p>查看空闲连接超时时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;wait_timeout&apos;</span><br></pre></td></tr></table></figure></p><p>修改空闲连接超时时间<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">wait_timeout=388000</span><br><span class="line">interactive_timeout=388000</span><br></pre></td></tr></table></figure></p><h2 id="3-事务"><a href="#3-事务" class="headerlink" title="3 事务"></a>3 事务</h2><p>查看事务是否开启自动提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;autocommit&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：默认开启</p></blockquote><h2 id="4-日志"><a href="#4-日志" class="headerlink" title="4 日志"></a>4 日志</h2><h3 id="4-1-general-log"><a href="#4-1-general-log" class="headerlink" title="4.1 general_log"></a>4.1 general_log</h3><p>作用：记录所有到达 Mysql Server 的 SQL 语句</p><p>场景：排查到达 Mysql server 的 SQL 语句</p><p>查看 general_log 是否开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;general_log&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：general_log 默认关闭</p></blockquote><p>启用 general_log 日志（重启后无效）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL general_log = ON</span><br></pre></td></tr></table></figure></p><p>启用 general_log 日志（永久有效）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">general_log=1</span><br></pre></td></tr></table></figure></p><p>查看 general_log 日志文件保存的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;general_log_file&apos;</span><br></pre></td></tr></table></figure></p><h3 id="4-2-redo-log"><a href="#4-2-redo-log" class="headerlink" title="4.2 redo log"></a>4.2 redo log</h3><p>若磁盘充足，建议将 redo log 文件大小设置为 1G，个数设置为 4</p><p>查看单个 redo log 文件大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_log_file_size%&apos;</span><br></pre></td></tr></table></figure></p><p>查看 redo log 个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_log_files_in_group%&apos;</span><br></pre></td></tr></table></figure></p><h2 id="5-表空间"><a href="#5-表空间" class="headerlink" title="5 表空间"></a>5 表空间</h2><p>查看 undo 表空间的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;innodb_undo_tablespaces&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：默认值为0，表示不独立设置 undo 的 tablespace，默认记录到 ibdata 中。建议设置为2，防止大事务导致回滚段过大，方便清理</p></blockquote><p>查看表数据是否存在共享表空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_file_per_table%&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：默认是 ON ，表示每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。OFF 则表示表的数据放在系统共享表空间，即跟数据字典放在一起。建议设置为 ON，因为一个表单独存储为一个文件更容易管理，而且不需要这个表的时，通过 drop table 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的</p></blockquote><h2 id="6-缓冲"><a href="#6-缓冲" class="headerlink" title="6 缓冲"></a>6 缓冲</h2><h3 id="6-1-change-buffer"><a href="#6-1-change-buffer" class="headerlink" title="6.1 change buffer"></a>6.1 change buffer</h3><p>查看 buffer pool 大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;innodb_buffer_pool_size&apos;</span><br></pre></td></tr></table></figure></p><p>查看 change buffer 最多占 buffer pool 的百分比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;innodb_change_buffer_max_size&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：默认值为25，表示最多只能占用 buffer pool 的 25%</p></blockquote><h2 id="7-统计"><a href="#7-统计" class="headerlink" title="7 统计"></a>7 统计</h2><p>重置表的统计信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">analyze table t;</span><br></pre></td></tr></table></figure></p><h2 id="8-磁盘"><a href="#8-磁盘" class="headerlink" title="8 磁盘"></a>8 磁盘</h2><h3 id="8-1-容量"><a href="#8-1-容量" class="headerlink" title="8.1 容量"></a>8.1 容量</h3><p>查看磁盘IO容量配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_io_capacity%&apos;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/29/Mysql配置优化/innodb_io_capacity_1.png" alt></p><blockquote><p>TIPS：默认是200，单位是页。该参数设置的大小取决于硬盘的IOPS，即每秒的输入输出量（或读写次数）</p></blockquote><p>innodb_io_capacity 参考配置</p><p><img src="/2020/06/29/Mysql配置优化/innodb_io_capacity_2.png" alt></p><p>查看脏页比例上限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_max_dirty_pages_pct%&apos;</span><br></pre></td></tr></table></figure></p><p>查看脏页比例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">VARIABLE_VALUE</span><br><span class="line">FROM</span><br><span class="line">information_schema.global_status</span><br><span class="line">WHERE</span><br><span class="line">VARIABLE_NAME = &apos;INNODB_BUFFER_POOL_PAGES_DIRTY&apos;</span><br><span class="line">) / (</span><br><span class="line">SELECT</span><br><span class="line">VARIABLE_VALUE</span><br><span class="line">FROM</span><br><span class="line">information_schema.global_status</span><br><span class="line">WHERE</span><br><span class="line">VARIABLE_NAME = &apos;INNODB_BUFFER_POOL_PAGES_TOTAL&apos;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：不要让脏页比例经常接近 75%</p></blockquote><p>相连脏页级联 flush 控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%innodb_flush_neighbors%&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：默认为1，即开启。若是机械硬盘可以减少随机IO；若是SSD或IOPS比较高的设备，设置成0，即关闭，可以减少SQL语句响应时间</p></blockquote><h3 id="8-1-落盘"><a href="#8-1-落盘" class="headerlink" title="8.1 落盘"></a>8.1 落盘</h3><p>查看 redo log 持久化到磁盘频率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;innodb_flush_log_at_trx_commit&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：<code>innodb_flush_log_at_trx_commit=1</code>表示每次事务的 redo log 都持久化到磁盘，可以保证 Mysql 异常重启之后数据不丢失</p></blockquote><p>查看 binlog 持久化到磁盘频率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;sync_binlog&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：<code>sync_binlog=1</code>表示每次事务的 binlog 都持久化到磁盘，可以保证 Mysql 异常重启之后 binlog 不丢失。默认，<code>sync_binlog=0</code>，表示 Mysql 不控制 binlog 的持久化，由文件系统控制其缓存的持久化。此时性能是最好的，但是风险也是最大的。因为一旦系统 Crash，在 binlog_cache 中的所有 binlog 信息都会被丢失</p></blockquote><p>非双1配置，是设置<code>innodb_flush_logs_at_trx_commit=2</code>且<code>sync_binlog=1000</code>，其使用场景如下</p><ol><li>业务高峰期。一般如果有预知的高峰期，DBA 会有预案，把主库设置成“非双 1”</li><li>备库延迟，为了让备库尽快赶上主库</li><li>用备份恢复主库的副本，应用 binlog 的过程</li><li>批量导入数据时</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境说明&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mysql-5.6.45-log&lt;/td&gt;
&lt;td&gt;关系型数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody
      
    
    </summary>
    
      <category term="Mysql" scheme="http://www.zhechu.top/categories/Mysql/"/>
    
    
      <category term="性能优化" scheme="http://www.zhechu.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Mysql闪回方案</title>
    <link href="http://www.zhechu.top/2020/06/21/Mysql%E9%97%AA%E5%9B%9E%E6%96%B9%E6%A1%88/"/>
    <id>http://www.zhechu.top/2020/06/21/Mysql闪回方案/</id>
    <published>2020-06-21T03:37:09.000Z</published>
    <updated>2020-11-03T13:04:34.180Z</updated>
    
    <content type="html"><![CDATA[<p>环境说明</p><table><thead><tr><th>环境</th><th>说明</th></tr></thead><tbody><tr><td>Mysql-5.6.46</td><td>关系型数据库</td></tr><tr><td>binlog2sql</td><td>从 MySQL binlog 解析得到逆向 SQL，仅支持 Mysql 5.6, 5.7</td></tr><tr><td>MyFlash</td><td>回滚 DML 操作工具，仅支持 Mysql 5.6, 5.7</td></tr><tr><td>CentOS7</td><td>操作系统</td></tr></tbody></table><p>Mysql 安装请看</p><a href="/2019/03/31/CentOS7安装Mysql/" title="CentOS7安装Mysql">CentOS7安装Mysql</a><p>或</p><a href="/2019/03/31/Docker安装Mysql/" title="Docker安装Mysql">Docker安装Mysql</a><h1 id="1-binlog2sql"><a href="#1-binlog2sql" class="headerlink" title="1 binlog2sql"></a>1 binlog2sql</h1><p>官方文档</p><p><a href="https://github.com/danfengcao/binlog2sql" target="_blank" rel="noopener">https://github.com/danfengcao/binlog2sql</a></p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>安装 git<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum -y install git</span><br><span class="line"><span class="meta">$</span> yum update -y nss curl libcurl</span><br></pre></td></tr></table></figure></p><p>安装 pip<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum -y install epel-release</span><br><span class="line"><span class="meta">$</span> yum -y install python-pip</span><br></pre></td></tr></table></figure></p><p>安装 binlog2sql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir -p /usr/local/src/mysql</span><br><span class="line"><span class="meta">$</span> cd /usr/local/src/mysql</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/danfengcao/binlog2sql.git &amp;&amp; cd binlog2sql</span><br><span class="line"><span class="meta">$</span> pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p><h2 id="1-2-使用示例"><a href="#1-2-使用示例" class="headerlink" title="1.2 使用示例"></a>1.2 使用示例</h2><p>Mysql server 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/my.cnf</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">max_binlog_size = 1G</span><br><span class="line">binlog_format = row</span><br><span class="line">binlog_row_image = full</span><br></pre></td></tr></table></figure></p><p>重启 Mysql server 使配置生效<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> systemctl restart mysql</span><br></pre></td></tr></table></figure></p><p>创建闪回专用的用户并授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;binlog2sql&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line">mysql&gt; GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;binlog2sql&apos;@&apos;localhost&apos;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>select</td><td>需要读取server端information_schema.COLUMNS表，获取表结构的元信息，拼接成可视化的sql语句</td></tr><tr><td>super/replication client</td><td>两个权限都可以，需要执行’SHOW MASTER STATUS’, 获取server端的binlog列表</td></tr><tr><td>replication slave</td><td>通过BINLOG_DUMP协议获取binlog内容的权限</td></tr></tbody></table><h3 id="1-2-1-找回误删数据"><a href="#1-2-1-找回误删数据" class="headerlink" title="1.2.1 找回误删数据"></a>1.2.1 找回误删数据</h3><h4 id="1-2-1-1-误删数据"><a href="#1-2-1-1-误删数据" class="headerlink" title="1.2.1.1 误删数据"></a>1.2.1.1 误删数据</h4><p>误删 ApolloConfigDB.App 表所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from ApolloConfigDB.App;</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure></p><h4 id="1-2-1-2-找回数据"><a href="#1-2-1-2-找回数据" class="headerlink" title="1.2.1.2 找回数据"></a>1.2.1.2 找回数据</h4><p>此时可能又做了其它操作，误删者突然意识到误删了，下面则是如何找回数据</p><p>手动执行将数据落盘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br></pre></td></tr></table></figure></p><p>查看 binlog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show  master logs;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/21/Mysql闪回方案/show_master_logs.png" alt></p><p>查看 binlog 的事件，找到误删数据的位点（Pos 列）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> show binlog events in 'mysql-bin.000020';</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/21/Mysql闪回方案/show_binlog_events.png" alt></p><blockquote><p>TIPS：若 binlog 不大，也可以直接跳过此项，把整个 binlog 解析即可</p></blockquote><p>解析出误删时操作的 SQL<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python /usr/local/src/mysql/binlog2sql/binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -ubinlog2sql -p '123456' -dApolloConfigDB -tApp --start-file='mysql-bin.000020' --start-position='202' --stop-position='1436' &gt; ApolloConfigDB_App_raw.sql</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='Sample App' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='default' AND `DataChange_CreatedTime`='2019-11-09 21:59:51' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='SampleApp' AND `DataChange_LastModifiedBy`='' AND `DataChange_LastTime`='2019-11-09 21:59:51' AND `Id`=1 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='spring-boot-logger' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-09 22:15:44' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='spring-boot-logger' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-09 22:15:44' AND `Id`=2 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='spring-cloud-logger' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-09 22:37:04' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='spring-cloud-logger' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-09 22:37:04' AND `Id`=3 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='video-service' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-10 01:26:47' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='video-service' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 01:26:47' AND `Id`=4 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='a' AND `OrgName`='样例部门1' AND `OwnerEmail`='ling-yu-wang@qq.com' AND `DataChange_CreatedBy`='admin' AND `DataChange_CreatedTime`='2019-11-10 03:20:24' AND `OrgId`='TEST1' AND `OwnerName`='admin' AND `AppId`='a' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 03:26:27' AND `Id`=5 AND `IsDeleted`='1' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='a' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-10 21:23:58' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='a' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 21:23:58' AND `Id`=6 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='b' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-10 21:26:00' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='b' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 21:27:50' AND `Id`=7 AND `IsDeleted`='1' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='b' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-10 21:41:15' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='b' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 21:41:15' AND `Id`=8 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='c' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-10 22:00:27' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='c' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-10 22:00:27' AND `Id`=9 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='qiaoku' AND `OrgName`='样例部门1' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-12 00:33:41' AND `OrgId`='TEST1' AND `OwnerName`='apollo' AND `AppId`='qiaoku' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-12 00:33:41' AND `Id`=10 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='测试' AND `OrgName`='开发部门' AND `OwnerEmail`='ling-yu-wang@qq.com' AND `DataChange_CreatedBy`='lingyuwang' AND `DataChange_CreatedTime`='2019-11-12 00:44:13' AND `OrgId`='dev' AND `OwnerName`='lingyuwang' AND `AppId`='test' AND `DataChange_LastModifiedBy`='lingyuwang' AND `DataChange_LastTime`='2019-11-12 00:44:13' AND `Id`=11 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">DELETE FROM `ApolloConfigDB`.`App` WHERE `Name`='ty' AND `OrgName`='开发部门' AND `OwnerEmail`='apollo@acme.com' AND `DataChange_CreatedBy`='apollo' AND `DataChange_CreatedTime`='2019-11-12 00:52:51' AND `OrgId`='dev' AND `OwnerName`='apollo' AND `AppId`='ty' AND `DataChange_LastModifiedBy`='apollo' AND `DataChange_LastTime`='2019-11-12 00:52:51' AND `Id`=12 AND `IsDeleted`='0' LIMIT 1; #start 202 end 1436 time 2020-06-21 20:14:33</span><br></pre></td></tr></table></figure><p>解析出误删时操作的逆向 SQL，用于恢复数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python /usr/local/src/mysql/binlog2sql/binlog2sql/binlog2sql.py --flashback -h127.0.0.1 -P3306 -ubinlog2sql -p '123456' -dApolloConfigDB -tApp --start-file='mysql-bin.000020' --start-position='202' --stop-position='1436' &gt; ApolloConfigDB_App_flashback.sql</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('ty', '开发部门', 'apollo@acme.com', 'apollo', '2019-11-12 00:52:51', 'dev', 'apollo', 'ty', 'apollo', '2019-11-12 00:52:51', 12, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('测试', '开发部门', 'ling-yu-wang@qq.com', 'lingyuwang', '2019-11-12 00:44:13', 'dev', 'lingyuwang', 'test', 'lingyuwang', '2019-11-12 00:44:13', 11, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('qiaoku', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-12 00:33:41', 'TEST1', 'apollo', 'qiaoku', 'apollo', '2019-11-12 00:33:41', 10, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('c', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-10 22:00:27', 'TEST1', 'apollo', 'c', 'apollo', '2019-11-10 22:00:27', 9, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('b', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-10 21:41:15', 'TEST1', 'apollo', 'b', 'apollo', '2019-11-10 21:41:15', 8, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('b', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-10 21:26:00', 'TEST1', 'apollo', 'b', 'apollo', '2019-11-10 21:27:50', 7, '1'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('a', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-10 21:23:58', 'TEST1', 'apollo', 'a', 'apollo', '2019-11-10 21:23:58', 6, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('a', '样例部门1', 'ling-yu-wang@qq.com', 'admin', '2019-11-10 03:20:24', 'TEST1', 'admin', 'a', 'apollo', '2019-11-10 03:26:27', 5, '1'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('video-service', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-10 01:26:47', 'TEST1', 'apollo', 'video-service', 'apollo', '2019-11-10 01:26:47', 4, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('spring-cloud-logger', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-09 22:37:04', 'TEST1', 'apollo', 'spring-cloud-logger', 'apollo', '2019-11-09 22:37:04', 3, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('spring-boot-logger', '样例部门1', 'apollo@acme.com', 'apollo', '2019-11-09 22:15:44', 'TEST1', 'apollo', 'spring-boot-logger', 'apollo', '2019-11-09 22:15:44', 2, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br><span class="line">INSERT INTO `ApolloConfigDB`.`App`(`Name`, `OrgName`, `OwnerEmail`, `DataChange_CreatedBy`, `DataChange_CreatedTime`, `OrgId`, `OwnerName`, `AppId`, `DataChange_LastModifiedBy`, `DataChange_LastTime`, `Id`, `IsDeleted`) VALUES ('Sample App', '样例部门1', 'apollo@acme.com', 'default', '2019-11-09 21:59:51', 'TEST1', 'apollo', 'SampleApp', '', '2019-11-09 21:59:51', 1, '0'); #start 202 end 1436 time 2020-06-21 20:14:33</span><br></pre></td></tr></table></figure><blockquote><p>TIP：建议先确认下SQL，再执行恢复操作，以免产生二次误操作。此处解析出的回滚SQL，IsDeleted 列的数据应该去掉单引号，不然 Mysql 会报 <strong>[Err] 1406 - Data too long for column ‘IsDeleted’ at row 1</strong>异常，原因是其数据类型为 bit(1)，而单个字符的长度已超出一个位（一个字节是8位）</p></blockquote><h1 id="2-MyFlash"><a href="#2-MyFlash" class="headerlink" title="2 MyFlash"></a>2 MyFlash</h1><p>官方文档</p><p><a href="https://github.com/Meituan-Dianping/MyFlash" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/MyFlash</a></p><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>安装依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum -y install gcc gcc-c++ libgnomeui-devel</span><br></pre></td></tr></table></figure></p><p>安装 MyFlash<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir -p /usr/local/src/mysql</span><br><span class="line"><span class="meta">$</span> cd /usr/local/src/mysql</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/Meituan-Dianping/MyFlash.git &amp;&amp; cd MyFlash</span><br><span class="line"><span class="meta">$</span> gcc -w  `pkg-config --cflags --libs glib-2.0` source/binlogParseGlib.c  -o binary/flashback</span><br></pre></td></tr></table></figure></p><h2 id="2-2-使用示例"><a href="#2-2-使用示例" class="headerlink" title="2.2 使用示例"></a>2.2 使用示例</h2><p>Mysql server 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vi /etc/my.cnf</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server_id=1</span><br><span class="line">max_binlog_size = 1G</span><br><span class="line">binlog_format = row</span><br><span class="line">binlog_row_image = full</span><br></pre></td></tr></table></figure></p><p>重启 Mysql server 使配置生效<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> systemctl restart mysql</span><br></pre></td></tr></table></figure></p><h3 id="2-2-1-找回误删数据"><a href="#2-2-1-找回误删数据" class="headerlink" title="2.2.1 找回误删数据"></a>2.2.1 找回误删数据</h3><h4 id="2-2-1-1-误删数据"><a href="#2-2-1-1-误删数据" class="headerlink" title="2.2.1.1 误删数据"></a>2.2.1.1 误删数据</h4><p>误删 ApolloConfigDB.Instance 表所有数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from ApolloConfigDB.Instance;</span><br><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-1-2-找回数据"><a href="#2-2-1-2-找回数据" class="headerlink" title="2.2.1.2 找回数据"></a>2.2.1.2 找回数据</h4><p>此时可能又做了其它操作，误删者突然意识到误删了，下面则是如何找回数据</p><p>手动执行将数据落盘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br></pre></td></tr></table></figure></p><p>查看 binlog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show  master logs;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/21/Mysql闪回方案/myflash_show_master_logs.png" alt></p><p>查看 binlog 的事件，找到误删数据的位点（Pos 列）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show binlog events in &apos;mysql-bin.000022&apos;;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/21/Mysql闪回方案/myflash_show_binlog_events.png" alt></p><blockquote><p>TIPS：若 binlog 不大，也可以直接跳过此项，把整个 binlog 解析即可</p></blockquote><p>解析出误删时操作的回滚 SQL，用于恢复数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rm /usr/local/src/mysql/MyFlash/binlog_output_base.flashback</span><br><span class="line"><span class="meta">$</span> /usr/local/src/mysql/MyFlash/binary/flashback --databaseNames=ApolloConfigDB --tableNames=Instance --start-position=719 --stop-position=1156 --binlogFileNames=/var/lib/mysql/mysql-bin.000022</span><br></pre></td></tr></table></figure></p><p>将回滚 SQL 转成可视化语句，方便确认<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mysqlbinlog --base64-output=decode-rows -v --skip-gtids /usr/local/src/mysql/MyFlash/binlog_output_base.flashback &gt; /usr/local/src/mysql/MyFlash/binlog_output_base.log</span><br><span class="line"><span class="meta">$</span> cat /usr/local/src/mysql/MyFlash/binlog_output_base.log</span><br></pre></td></tr></table></figure></p><p><img src="/2020/06/21/Mysql闪回方案/cat_binlog_output_base_log.png" alt></p><p>结合 mysqlbinlog 工具恢复数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mysqlbinlog /usr/local/src/mysql/MyFlash/binlog_output_base.flashback | mysql -uroot -p123456</span><br></pre></td></tr></table></figure></p><blockquote><p>TIPS：可以将 binlog 文件离线转成 binlog_output_base.flashback 后再到线上恢复</p></blockquote><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><h2 id="3-1-binlog2sql-VS-MyFlash"><a href="#3-1-binlog2sql-VS-MyFlash" class="headerlink" title="3.1 binlog2sql VS MyFlash"></a>3.1 binlog2sql VS MyFlash</h2><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>binlog2sql</td><td>1.解析为标准SQL，方便理解、筛选</td><td>1.mysql server必须开启，离线模式下不能解析<br>2.参数 binlog_row_image 必须为FULL，暂不支持MINIMAL<br>3.只能回滚DML（增、删、改）</td></tr><tr><td>MyFlash</td><td>1.支持离线解析<br>2.解析效率更高</td><td>1.binlog格式必须为row,且binlog_row_image=full<br>2.只能回滚DML（增、删、改）</td></tr></tbody></table><h2 id="3-2-生产实践"><a href="#3-2-生产实践" class="headerlink" title="3.2 生产实践"></a>3.2 生产实践</h2><ol><li><p>需回滚的数据量不大时建议用 binlog2sql，方便理解和筛选需回滚的数据</p></li><li><p>需回滚的数据量较大时建议用 MyFlash，解析更高</p></li><li><p>若在生产环境发版时需回滚版本，则可以结合数据库全库回滚技术，并通过 binlog2sql/MyFlash 补回发版时的数据更新</p></li><li><p>生产环境做删除表或字段操作时，可以在下一个版本做（一般不会影响业务，避免系统版本回滚时也需回滚DDL），从源头避免产生故障</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境说明&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mysql-5.6.46&lt;/td&gt;
&lt;td&gt;关系型数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bi
      
    
    </summary>
    
      <category term="Mysql" scheme="http://www.zhechu.top/categories/Mysql/"/>
    
    
      <category term="升级回滚" scheme="http://www.zhechu.top/tags/%E5%8D%87%E7%BA%A7%E5%9B%9E%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>Guava布隆过滤器的应用</title>
    <link href="http://www.zhechu.top/2020/05/31/Guava%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://www.zhechu.top/2020/05/31/Guava布隆过滤器的应用/</id>
    <published>2020-05-31T15:35:23.000Z</published>
    <updated>2020-11-03T13:04:34.084Z</updated>
    
    <content type="html"><![CDATA[<p><code>com.google.common.hash.BloomFilter</code>的应用</p><h2 id="1-示例"><a href="#1-示例" class="headerlink" title="1 示例"></a>1 示例</h2><p>示例代码</p><p><a href="https://github.com/zhechu/algorithm-demo/blob/master/src/main/java/com/wise/algorithm/apply/bitmap/BloomFilterByGuava.java" target="_blank" rel="noopener">https://github.com/zhechu/algorithm-demo/blob/master/src/main/java/com/wise/algorithm/apply/bitmap/BloomFilterByGuava.java</a></p><p>问题：有1亿个随机数，其范围在1到1亿之间。要求将1到1亿之间没有在随机数中的数求出来？</p><p>思路：将随机数存储到布隆过滤器中，依次遍历判断即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> * 有1亿个随机数，其范围在1到1亿之间。要求将1到1亿之间没有在随机数中的数求出来？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方案：</span></span><br><span class="line"><span class="comment"> * Guava布隆过滤器（不在集合的一定不在，在的不一定在）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-26 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterByGuava</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 包含 minValue 和 maxValue</span></span><br><span class="line">        <span class="keyword">int</span> minValue = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = generateRandomArray(length, minValue, maxValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        printArray(arr);</span><br><span class="line"></span><br><span class="line">        BloomFilter&lt;Integer&gt; filter = BloomFilter.create(</span><br><span class="line">                <span class="comment">// 存放 Integer 类型数据</span></span><br><span class="line">                Funnels.integerFunnel(),</span><br><span class="line">                <span class="comment">// 预计长度</span></span><br><span class="line">                length,</span><br><span class="line">                <span class="comment">// 预计误报率</span></span><br><span class="line">                <span class="number">0.001</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            filter.put(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取不在随机数中的数</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = minValue; k &lt;= maxValue; k++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否在随机数的数组中</span></span><br><span class="line">            <span class="keyword">if</span> (!filter.mightContain(k)) &#123;</span><br><span class="line">                result.add(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(minValue + <span class="string">"~"</span> + maxValue + <span class="string">"不在上述随机数中的数有："</span> + result.size() + <span class="string">"个"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> length, <span class="keyword">int</span> minValue, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            arr[i] = random.nextInt(maxValue - minValue + <span class="number">1</span>) + minValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 3 6 10 8 1 3 4 10 2</span><br><span class="line">1~10不在上述随机数中的数有：3个</span><br><span class="line">[5, 7, 9]</span><br></pre></td></tr></table></figure></p><h2 id="2-BloomFilter-VS-BitSet"><a href="#2-BloomFilter-VS-BitSet" class="headerlink" title="2 BloomFilter VS BitSet"></a>2 BloomFilter VS BitSet</h2><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>com.google.common.hash.BloomFilter</td><td>空间复杂度小</td><td>1.会误报（不在集合的一定不在，在的不一定在）<br> 2.不能按单个元素清除</td></tr><tr><td>java.util.BitSet</td><td>空间复杂度超小</td><td>功能没 <code>com.google.common.hash.BloomFilter</code> 强大</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;com.google.common.hash.BloomFilter&lt;/code&gt;的应用&lt;/p&gt;
&lt;h2 id=&quot;1-示例&quot;&gt;&lt;a href=&quot;#1-示例&quot; class=&quot;headerlink&quot; title=&quot;1 示例&quot;&gt;&lt;/a&gt;1 示例&lt;/h2&gt;&lt;p&gt;示例代码
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="算法" scheme="http://www.zhechu.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BitSet的应用</title>
    <link href="http://www.zhechu.top/2020/05/31/BitSet%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://www.zhechu.top/2020/05/31/BitSet的应用/</id>
    <published>2020-05-31T12:56:36.000Z</published>
    <updated>2020-11-03T13:04:34.051Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.BitSet</code>的应用</p><p>示例代码</p><p><a href="https://github.com/zhechu/algorithm-demo/tree/master/src/main/java/com/wise/algorithm/apply/bitmap" target="_blank" rel="noopener">https://github.com/zhechu/algorithm-demo/tree/master/src/main/java/com/wise/algorithm/apply/bitmap</a></p><h2 id="1-布隆过滤器"><a href="#1-布隆过滤器" class="headerlink" title="1 布隆过滤器"></a>1 布隆过滤器</h2><p>问题：有1亿个随机数，其范围在1到1亿之间。要求将1到1亿之间没有在随机数中的数求出来？</p><p>思路：将随机数存储到位图中，若对应的位为false，则表示对应的数不在随机数中，然后依次遍历即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> * 有1亿个随机数，其范围在1到1亿之间。要求将1到1亿之间没有在随机数中的数求出来？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方案：</span></span><br><span class="line"><span class="comment"> * 位图法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-26 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterByBitSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 包含 minValue 和 maxValue</span></span><br><span class="line">        <span class="keyword">int</span> minValue = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = generateRandomArray(length, minValue, maxValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        printArray(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BitSet 索引从0开始，因此需浪费一个位</span></span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet(maxValue + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            bitSet.set(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取不在随机数中的数</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = minValue; k &lt;= maxValue; k++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否在位图中</span></span><br><span class="line">            <span class="keyword">if</span> (!bitSet.get(k)) &#123;</span><br><span class="line">                result.add(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(minValue + <span class="string">"~"</span> + maxValue + <span class="string">"不在上述随机数中的数有："</span> + result.size() + <span class="string">"个"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> length, <span class="keyword">int</span> minValue, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            arr[i] = random.nextInt(maxValue - minValue + <span class="number">1</span>) + minValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 10 7 4 4 4 2 9 2 2</span><br><span class="line">1~10不在上述随机数中的数有：5个</span><br><span class="line">[1, 3, 5, 6, 8]</span><br></pre></td></tr></table></figure></p><h2 id="2-排序"><a href="#2-排序" class="headerlink" title="2 排序"></a>2 排序</h2><p>问题：有1亿个不同的数，其范围在1到1亿之间。要求将1到1亿之间的数进行有序输出？</p><p>思路：将1亿个数存储到位图中，依次遍历相当于已排好序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 问题：</span></span><br><span class="line"><span class="comment"> * 有1亿个不同的数，其范围在1到1亿之间。要求将1到1亿之间的数进行有序输出？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方案：</span></span><br><span class="line"><span class="comment"> * 位图法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lingyuwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-26 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearSortByBitSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 包含 minValue 和 maxValue</span></span><br><span class="line">        <span class="keyword">int</span> minValue = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = generateRandomArray(length, minValue, maxValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        printArray(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BitSet 索引从0开始，因此需浪费一个位</span></span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet(maxValue + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            bitSet.set(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"有序输出："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = minValue; k &lt;= maxValue; k++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否在位图中</span></span><br><span class="line">            <span class="keyword">if</span> (bitSet.get(k)) &#123;</span><br><span class="line">                System.out.print(k + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateRandomArray(<span class="keyword">int</span> length, <span class="keyword">int</span> minValue, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(length);</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                temp = random.nextInt(maxValue - minValue + <span class="number">1</span>) + minValue;</span><br><span class="line">            &#125; <span class="keyword">while</span> (set.contains(temp));</span><br><span class="line"></span><br><span class="line">            set.add(temp);</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 20 12 2 6 16 15 14 10 7</span><br><span class="line">有序输出：</span><br><span class="line">1 2 6 7 10 12 14 15 16 20</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.BitSet&lt;/code&gt;的应用&lt;/p&gt;
&lt;p&gt;示例代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhechu/algorithm-demo/tree/master/src/main/java/com/wise/
      
    
    </summary>
    
      <category term="Java" scheme="http://www.zhechu.top/categories/Java/"/>
    
    
      <category term="算法" scheme="http://www.zhechu.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
